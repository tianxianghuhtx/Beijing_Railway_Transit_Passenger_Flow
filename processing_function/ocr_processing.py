from PIL import Image, ImageFilter, ImageDraw, ImageEnhance
import numpy as np
import re
import math
from paddleocr import PaddleOCR, TextDetection, TextRecognition

model_textdet = TextDetection(model_name="PP-OCRv5_server_det")
model_textrec = TextRecognition(model_name="PP-OCRv5_server_rec")

def img_cut_center(png: Image.Image, x: int, y: int, w: int, h: int) -> Image.Image:
    crop_box = (x-w/2, y-h/2, x+w/2, y+h/2)
    return png.crop(crop_box)

def img_cut_leftup(png: Image.Image, x: int, y: int, w: int, h: int) -> Image.Image:
    crop_box = (x, y, x+w, y+h)
    return png.crop(crop_box)

def distance(p1, p2): #两点间距离计算
    return math.hypot(p2[0]-p1[0], p2[1]-p1[1])

def img_cut_point(png: Image.Image, lux: int, luy: int, rux: int, ruy: int, rdx: int, rdy: int, ldx:int, ldy: int) -> Image.Image:
    crop_box = (min(lux, ldx), min(luy, ruy), max(rux, rdx), max(ldy, rdy))
    return png.crop(crop_box)

def img_binarize(img: Image.Image, black_extpand: bool, threshold: int) -> Image.Image:
    img_bin = Image.eval(img.convert("L"), lambda p: 0 if p < threshold else 255)
    if black_extpand:
        return img_bin.filter(ImageFilter.MinFilter(size=3)) # 黑色周围3*3扩充均变为黑色
    else:
        return img_bin

def img_enhance(img: Image.Image, factor: float):
    img_enh = ImageEnhance.Contrast(img).enhance(factor)
    return img_enh


def ocr_2025_04_16_2025_12_31(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {
        "M1BATONG": {
            "name": (111, 900, 169, 45),
            "flow": (633, 900, 865, 45)
        },
        "M2": {
            "name": (111, 960, 169, 45),
            "flow": (633, 960, 865, 45)
        },
        "M3": {
            "name": (111, 1019, 169, 45),
            "flow": (633, 1019, 865, 45)
        },
        "M4DAXING": {
            "name": (111, 1077, 169, 45),
            "flow": (633, 1077, 865, 45)
        },
        "M5": {
            "name": (111, 1136, 169, 45),
            "flow": (633, 1136, 865, 45)
        },
        "M6": {
            "name": (111, 1194, 169, 45),
            "flow": (633, 1194, 865, 45)
        },
        "M7": {
            "name": (111, 1252, 169, 45),
            "flow": (633, 1252, 865, 45)
        },
        "M8": {
            "name": (111, 1312, 169, 45),
            "flow": (633, 1312, 865, 45)
        },
        "M9": {
            "name": (111, 1369, 169, 45),
            "flow": (633, 1369, 865, 45)
        },
        "M10": {
            "name": (111, 1428, 169, 45),
            "flow": (633, 1428, 865, 45)
        },
        "M11": {
            "name": (111, 1487, 169, 45),
            "flow": (633, 1487, 865, 45)
        },
        "M12": {
            "name": (111, 1545, 169, 45),
            "flow": (633, 1545, 865, 45)
        },
        "M13": {
            "name": (111, 1604, 169, 45),
            "flow": (633, 1604, 865, 45)
        },
        "M14": {
            "name": (111, 1663, 169, 45),
            "flow": (633, 1663, 865, 45)
        },
        "M15": {
            "name": (111, 1721, 169, 45),
            "flow": (633, 1721, 865, 45)
        },
        "M16": {
            "name": (111, 1779, 169, 45),
            "flow": (633, 1779, 865, 45)
        },
        "M17S": {
            "name": (111, 1838, 169, 45),
            "flow": (633, 1838, 865, 45)
        },
        "M17N": {
            "name": (111, 1896, 169, 45),
            "flow": (633, 1896, 865, 45)
        },
        "M19": {
            "name": (111, 1956, 169, 45),
            "flow": (633, 1956, 865, 45)
        },
        "M24_YIZHUANG": {
            "name": (111, 2132, 169, 45),
            "flow": (633, 2132, 865, 45)
        },
        "M25_FANGSHAN": {
            "name": (111, 2073, 169, 45),
            "flow": (633, 2073, 865, 45)
        },
        "YANFANG": {
            "name": (111, 2191, 169, 45),
            "flow": (633, 2191, 865, 45)
        },
        "M26_S1": {
            "name": (111, 2248, 169, 45),
            "flow": (633, 2248, 865, 45)
        },
        "M27_CHANGPING": {
            "name": (111, 2014, 169, 45),
            "flow": (633, 2014, 865, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 2425, 169, 45),
            "flow": (633, 2425, 865, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 2484, 169, 45),
            "flow": (633, 2484, 865, 45)
        },
        "XIJIAO": {
            "name": (111, 2366, 169, 45),
            "flow": (633, 2366, 865, 45)
        },
        "YIZHUANGT1": {
            "name": (111, 2308, 169, 45),
            "flow": (633, 2308, 865, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 258, 690, 310, 45)
    png_flow = img_cut_center(png, 545, 740, 335, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  62).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])
    # print(f"date: *{text_date}*")

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.量万人次]", "", result_flow[0]["rec_text"]))
    # print(f"flow: *{text_flow}*")
    # print()

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
        luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
        rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
        ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
        rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
        rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
        ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
        ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
        png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
        png_det_array = np.array(png_det)

        # if line == "M1BATONG":
        #     png_det_bin.show()
        #     print(lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
        #     print(detection_flow[0])
        #     for res in detection_flow:
        #         res.print()
        #         res.save_to_img(save_path="./output/")
        #         res.save_to_json(save_path="./output/res.json")

        globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
        globals()[f"text_{line}_flow"] = re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"])

        # print(f"{line}_name: *globals()[f"text_{line}_name"]*")
        # print(f"{line}_flow: *globals()[f"text_{line}_flow"]*")
        # print()
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{2})月(\d{2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^量(\d+(?:\.\d+)?)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR" 
    
    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # print(f"    OCR结果:")
    # print(f"        日期: {final_date}")
    # print(f"        总客流量: {final_flow}")
    # print()
    # for single_linedata in final_linedata:
    #     print(single_linedata["name"],single_linedata["flow"])
    # print()

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2025_04_13_2025_04_15(png: Image.Image):    
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 980, 169, 45),
            "flow": (633, 980, 865, 45)
        },
        "M2": {
            "name": (111, 1040, 169, 45),
            "flow": (633, 1040, 865, 45)
        },
        "M3": {
            "name": (111, 1099, 169, 45),
            "flow": (633, 1099, 865, 45)
        },
        "M4DAXING": {
            "name": (111, 1157, 169, 45),
            "flow": (633, 1157, 865, 45)
        },
        "M5": {
            "name": (111, 1216, 169, 45),
            "flow": (633, 1216, 865, 45)
        },
        "M6": {
            "name": (111, 1274, 169, 45),
            "flow": (633, 1274, 865, 45)
        },
        "M7": {
            "name": (111, 1332, 169, 45),
            "flow": (633, 1332, 865, 45)
        },
        "M8": {
            "name": (111, 1392, 169, 45),
            "flow": (633, 1392, 865, 45)
        },
        "M9": {
            "name": (111, 1449, 169, 45),
            "flow": (633, 1449, 865, 45)
        },
        "M10": {
            "name": (111, 1508, 169, 45),
            "flow": (633, 1508, 865, 45)
        },
        "M11": {
            "name": (111, 1567, 169, 45),
            "flow": (633, 1567, 865, 45)
        },
        "M12": {
            "name": (111, 1625, 169, 45),
            "flow": (633, 1625, 865, 45)
        },
        "M13": {
            "name": (111, 1684, 169, 45),
            "flow": (633, 1684, 865, 45)
        },
        "M14": {
            "name": (111, 1743, 169, 45),
            "flow": (633, 1743, 865, 45)
        },
        "M15": {
            "name": (111, 1801, 169, 45),
            "flow": (633, 1801, 865, 45)
        },
        "M16": {
            "name": (111, 1859, 169, 45),
            "flow": (633, 1859, 865, 45)
        },
        "M17S": {
            "name": (111, 1918, 169, 45),
            "flow": (633, 1918, 865, 45)
        },
        "M17N": {
            "name": (111, 1976, 169, 45),
            "flow": (633, 1976, 865, 45)
        },
        "M19": {
            "name": (111, 2036, 169, 45),
            "flow": (633, 2036, 865, 45)
        },
        "M24_YIZHUANG": {
            "name": (111, 2212, 169, 45),
            "flow": (633, 2212, 865, 45)
        },
        "M25_FANGSHAN": {
            "name": (111, 2153, 169, 45),
            "flow": (633, 2153, 865, 45)
        },
        "YANFANG": {
            "name": (111, 2271, 169, 45),
            "flow": (633, 2271, 865, 45)
        },
        "M26_S1": {
            "name": (111, 2328, 169, 45),
            "flow": (633, 2328, 865, 45)
        },
        "M27_CHANGPING": {
            "name": (111, 2094, 169, 45),
            "flow": (633, 2094, 865, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 2505, 169, 45),
            "flow": (633, 2505, 865, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 2564, 169, 45),
            "flow": (633, 2564, 865, 45)
        },
        "XIJIAO": {
            "name": (111, 2446, 169, 45),
            "flow": (633, 2446, 865, 45)
        },
        "YIZHUANGT1": {
            "name": (111, 2388, 169, 45),
            "flow": (633, 2388, 865, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 258, 770, 310, 45)
    png_flow = img_cut_center(png, 545, 820, 335, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(globals()[f"png_{line}_flow"])
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.量万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
        luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
        rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
        ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
        rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
        rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
        ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
        ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
        png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
        png_det_array = np.array(png_det)

        globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
        globals()[f"text_{line}_flow"] = re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"])
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{2})月(\d{2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^量(\d+(?:\.\d+)?)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR" 
    
    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2025_04_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 987, 169, 45),
            "flow": (633, 987, 865, 45)
        },
        "M2": {
            "name": (111, 1062, 169, 45),
            "flow": (633, 1062, 865, 45)
        },
        "M3": {
            "name": (111, 1137, 169, 45),
            "flow": (633, 1137, 865, 45)
        },
        "M4DAXING": {
            "name": (111, 1212, 169, 45),
            "flow": (633, 1212, 865, 45)
        },
        "M5": {
            "name": (111, 1287, 169, 45),
            "flow": (633, 1287, 865, 45)
        },
        "M6": {
            "name": (111, 1362, 169, 45),
            "flow": (633, 1362, 865, 45)
        },
        "M7": {
            "name": (111, 1436, 169, 45),
            "flow": (633, 1436, 865, 45)
        },
        "M8": {
            "name": (111, 1511, 169, 45),
            "flow": (633, 1511, 865, 45)
        },
        "M9": {
            "name": (111, 1584, 169, 45),
            "flow": (633, 1584, 865, 45)
        },
        "M10": {
            "name": (111, 1659, 169, 45),
            "flow": (633, 1659, 865, 45)
        },
        "M11": {
            "name": (111, 1734, 169, 45),
            "flow": (633, 1734, 865, 45)
        },
        "M12": {
            "name": (111, 1809, 169, 45),
            "flow": (633, 1809, 865, 45)
        },
        "M14": {
            "name": (111, 1880, 169, 45),
            "flow": (633, 1880, 865, 45)
        },
        "M15": {
            "name": (111, 1954, 169, 45),
            "flow": (633, 1954, 865, 45)
        },
        "M16": {
            "name": (111, 2029, 169, 45),
            "flow": (633, 2029, 865, 45)
        },
        "M17S": {
            "name": (111, 2104, 169, 45),
            "flow": (633, 2104, 865, 45)
        },
        "M17N": {
            "name": (111, 2179, 169, 45),
            "flow": (633, 2179, 865, 45)
        },
        "M19": {
            "name": (111, 2253, 169, 45),
            "flow": (633, 2253, 865, 45)
        },
        "M27_CHANGPING": {
            "name": (111, 2328, 169, 45),
            "flow": (633, 2328, 865, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 2403, 169, 45),
            "flow": (633, 2403, 865, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 258, 768, 310, 45)
    png_flow = img_cut_center(png, 545, 818, 335, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(globals()[f"png_{line}_flow"])
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.量万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
        luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
        rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
        ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
        rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
        rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
        ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
        ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
        png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
        png_det_array = np.array(png_det)

        globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
        globals()[f"text_{line}_flow"] = re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"])
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{2})月(\d{2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^量(\d+(?:\.\d+)?)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR" 
    
    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_12_15_2025_04_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 980, 169, 45),
            "flow": (633, 980, 865, 45)
        },
        "M2": {
            "name": (111, 1040, 169, 45),
            "flow": (633, 1040, 865, 45)
        },
        "M3": {
            "name": (111, 1099, 169, 45),
            "flow": (633, 1099, 865, 45)
        },
        "M4DAXING": {
            "name": (111, 1157, 169, 45),
            "flow": (633, 1157, 865, 45)
        },
        "M5": {
            "name": (111, 1216, 169, 45),
            "flow": (633, 1216, 865, 45)
        },
        "M6": {
            "name": (111, 1274, 169, 45),
            "flow": (633, 1274, 865, 45)
        },
        "M7": {
            "name": (111, 1332, 169, 45),
            "flow": (633, 1332, 865, 45)
        },
        "M8": {
            "name": (111, 1392, 169, 45),
            "flow": (633, 1392, 865, 45)
        },
        "M9": {
            "name": (111, 1449, 169, 45),
            "flow": (633, 1449, 865, 45)
        },
        "M10": {
            "name": (111, 1508, 169, 45),
            "flow": (633, 1508, 865, 45)
        },
        "M11": {
            "name": (111, 1567, 169, 45),
            "flow": (633, 1567, 865, 45)
        },
        "M12": {
            "name": (111, 1625, 169, 45),
            "flow": (633, 1625, 865, 45)
        },
        "M13": {
            "name": (111, 1684, 169, 45),
            "flow": (633, 1684, 865, 45)
        },
        "M14": {
            "name": (111, 1743, 169, 45),
            "flow": (633, 1743, 865, 45)
        },
        "M15": {
            "name": (111, 1801, 169, 45),
            "flow": (633, 1801, 865, 45)
        },
        "M16": {
            "name": (111, 1859, 169, 45),
            "flow": (633, 1859, 865, 45)
        },
        "M17S": {
            "name": (111, 1918, 169, 45),
            "flow": (633, 1918, 865, 45)
        },
        "M17N": {
            "name": (111, 1976, 169, 45),
            "flow": (633, 1976, 865, 45)
        },
        "M19": {
            "name": (111, 2036, 169, 45),
            "flow": (633, 2036, 865, 45)
        },
        "M24_YIZHUANG": {
            "name": (111, 2212, 169, 45),
            "flow": (633, 2212, 865, 45)
        },
        "M25_FANGSHAN": {
            "name": (111, 2153, 169, 45),
            "flow": (633, 2153, 865, 45)
        },
        "YANFANG": {
            "name": (111, 2271, 169, 45),
            "flow": (633, 2271, 865, 45)
        },
        "M26_S1": {
            "name": (111, 2328, 169, 45),
            "flow": (633, 2328, 865, 45)
        },
        "M27_CHANGPING": {
            "name": (111, 2094, 169, 45),
            "flow": (633, 2094, 865, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 2505, 169, 45),
            "flow": (633, 2505, 865, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 2564, 169, 45),
            "flow": (633, 2564, 865, 45)
        },
        "XIJIAO": {
            "name": (111, 2446, 169, 45),
            "flow": (633, 2446, 865, 45)
        },
        "YIZHUANGT1": {
            "name": (111, 2388, 169, 45),
            "flow": (633, 2388, 865, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 258, 769, 310, 45)
    png_flow = img_cut_center(png, 545, 818, 335, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(globals()[f"png_{line}_flow"])
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.量万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
        luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
        rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
        ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
        rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
        rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
        ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
        ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
        png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
        png_det_array = np.array(png_det)

        globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
        globals()[f"text_{line}_flow"] = re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"])
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{2})月(\d{2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^量(\d+(?:\.\d+)?)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR" 
    
    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_09_01_2024_12_14(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 980, 169, 45),
            "flow": (633, 980, 865, 45)
        },
        "M2": {
            "name": (111, 1044, 169, 45),
            "flow": (633, 1044, 865, 45)
        },
        "M4DAXING": {
            "name": (111, 1106, 169, 45),
            "flow": (633, 1106, 865, 45)
        },
        "M5": {
            "name": (111, 1170, 169, 45),
            "flow": (633, 1170, 865, 45)
        },
        "M6": {
            "name": (111, 1234, 169, 45),
            "flow": (633, 1234, 865, 45)
        },
        "M7": {
            "name": (111, 1296, 169, 45),
            "flow": (633, 1296, 865, 45)
        },
        "M8": {
            "name": (111, 1359, 169, 45),
            "flow": (633, 1359, 865, 45)
        },
        "M9": {
            "name": (111, 1423, 169, 45),
            "flow": (633, 1423, 865, 45)
        },
        "M10": {
            "name": (111, 1486, 169, 45),
            "flow": (633, 1486, 865, 45)
        },
        "M11": {
            "name": (111, 1549, 169, 45),
            "flow": (633, 1549, 865, 45)
        },
        "M13": {
            "name": (111, 1612, 169, 45),
            "flow": (633, 1612, 865, 45)
        },
        "M14": {
            "name": (111, 1676, 169, 45),
            "flow": (633, 1676, 865, 45)
        },
        "M15": {
            "name": (111, 1738, 169, 45),
            "flow": (633, 1738, 865, 45)
        },
        "M16": {
            "name": (111, 1802, 169, 45),
            "flow": (633, 1802, 865, 45)
        },
        "M17S": {
            "name": (111, 1864, 169, 45),
            "flow": (633, 1864, 865, 45)
        },
        "M17N": {
            "name": (111, 1928, 169, 45),
            "flow": (633, 1928, 865, 45)
        },
        "M19": {
            "name": (111, 1991, 169, 45),
            "flow": (633, 1991, 865, 45)
        },
        "M24_YIZHUANG": {
            "name": (111, 2182, 169, 45),
            "flow": (633, 2182, 865, 45)
        },
        "M25_FANGSHAN": {
            "name": (111, 2118, 169, 45),
            "flow": (633, 2118, 865, 45)
        },
        "YANFANG": {
            "name": (111, 2243, 169, 45),
            "flow": (633, 2243, 865, 45)
        },
        "M26_S1": {
            "name": (111, 2307, 169, 45),
            "flow": (633, 2307, 865, 45)
        },
        "M27_CHANGPING": {
            "name": (111, 2055, 169, 45),
            "flow": (633, 2055, 865, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 2496, 169, 45),
            "flow": (633, 2496, 865, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 2559, 169, 45),
            "flow": (633, 2559, 865, 45)
        },
        "XIJIAO": {
            "name": (111, 2433, 169, 45),
            "flow": (633, 2433, 865, 45)
        },
        "YIZHUANGT1": {
            "name": (111, 2370, 169, 45),
            "flow": (633, 2370, 865, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 258, 769, 310, 45)
    png_flow = img_cut_center(png, 545, 818, 335, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(globals()[f"png_{line}_flow"])
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.量万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
        luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
        rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
        ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
        rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
        rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
        ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
        ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
        png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
        png_det_array = np.array(png_det)

        globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
        globals()[f"text_{line}_flow"] = re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"])
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{2})月(\d{2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^量(\d+(?:\.\d+)?)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR" 
    
    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_08_31(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (164, 911, 154, 45),
            "flow": (617, 911, 735, 45)
        },
        "M2": {
            "name": (164, 972, 154, 45),
            "flow": (617, 972, 735, 45)
        },
        "M4DAXING": {
            "name": (164, 1032, 154, 45),
            "flow": (617, 1032, 735, 45)
        },
        "M5": {
            "name": (164, 1093, 154, 45),
            "flow": (617, 1093, 735, 45)
        },
        "M6": {
            "name": (164, 1153, 154, 45),
            "flow": (617, 1153, 735, 45)
        },
        "M7": {
            "name": (164, 1214, 154, 45),
            "flow": (617, 1214, 735, 45)
        },
        "M8": {
            "name": (164, 1274, 154, 45),
            "flow": (617, 1274, 735, 45)
        },
        "M9": {
            "name": (164, 1335, 154, 45),
            "flow": (617, 1335, 735, 45)
        },
        "M10": {
            "name": (164, 1395, 154, 45),
            "flow": (617, 1395, 735, 45)
        },
        "M11": {
            "name": (164, 1456, 154, 45),
            "flow": (617, 1456, 735, 45)
        },
        "M13": {
            "name": (164, 1517, 154, 45),
            "flow": (617, 1517, 735, 45)
        },
        "M14": {
            "name": (164, 1577, 154, 45),
            "flow": (617, 1577, 735, 45)
        },
        "M15": {
            "name": (164, 1638, 154, 45),
            "flow": (617, 1638, 735, 45)
        },
        "M16": {
            "name": (164, 1698, 154, 45),
            "flow": (617, 1698, 735, 45)
        },
        "M17S": {
            "name": (164, 1759, 154, 45),
            "flow": (617, 1759, 735, 45)
        },
        "M17N": {
            "name": (164, 1819, 154, 45),
            "flow": (617, 1819, 735, 45)
        },
        "M19": {
            "name": (164, 1880, 154, 45),
            "flow": (617, 1880, 735, 45)
        },
        "M24_YIZHUANG": {
            "name": (164, 2062, 154, 45),
            "flow": (617, 2062, 735, 45)
        },
        "M25_FANGSHAN": {
            "name": (164, 2001, 154, 45),
            "flow": (617, 2001, 735, 45)
        },
        "YANFANG": {
            "name": (164, 2122, 154, 45),
            "flow": (617, 2122, 735, 45)
        },
        "M26_S1": {
            "name": (164, 2183, 154, 45),
            "flow": (617, 2183, 735, 45)
        },
        "M27_CHANGPING": {
            "name": (164, 1941, 154, 45),
            "flow": (617, 1941, 735, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (164, 2364, 154, 45),
            "flow": (617, 2364, 735, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (164, 2425, 154, 45),
            "flow": (617, 2425, 735, 45)
        },
        "XIJIAO": {
            "name": (164, 2304, 154, 45),
            "flow": (617, 2304, 735, 45)
        },
        "YIZHUANGT1": {
            "name": (164, 2243, 154, 45),
            "flow": (617, 2243, 735, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 252, 685, 270, 45)
    png_flow = img_cut_center(png, 263, 742, 295, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  145).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_08_04_2024_08_30(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (172, 930, 154, 45),
            "flow": (620, 930, 730, 45)
        },
        "M2": {
            "name": (172, 990, 154, 45),
            "flow": (620, 990, 730, 45)
        },
        "M4DAXING": {
            "name": (172, 1050, 154, 45),
            "flow": (620, 1050, 730, 45)
        },
        "M5": {
            "name": (172, 1110, 154, 45),
            "flow": (620, 1110, 730, 45)
        },
        "M6": {
            "name": (172, 1170, 154, 45),
            "flow": (620, 1170, 730, 45)
        },
        "M7": {
            "name": (172, 1230, 154, 45),
            "flow": (620, 1230, 730, 45)
        },
        "M8": {
            "name": (172, 1290, 154, 45),
            "flow": (620, 1290, 730, 45)
        },
        "M9": {
            "name": (172, 1349, 154, 45),
            "flow": (620, 1349, 730, 45)
        },
        "M10": {
            "name": (172, 1409, 154, 45),
            "flow": (620, 1409, 730, 45)
        },
        "M11": {
            "name": (172, 1469, 154, 45),
            "flow": (620, 1469, 730, 45)
        },
        "M13": {
            "name": (172, 1528, 154, 45),
            "flow": (620, 1528, 730, 45)
        },
        "M14": {
            "name": (172, 1588, 154, 45),
            "flow": (620, 1588, 730, 45)
        },
        "M15": {
            "name": (172, 1648, 154, 45),
            "flow": (620, 1648, 730, 45)
        },
        "M16": {
            "name": (172, 1708, 154, 45),
            "flow": (620, 1708, 730, 45)
        },
        "M17S": {
            "name": (172, 1768, 154, 45),
            "flow": (620, 1768, 730, 45)
        },
        "M17N": {
            "name": (172, 1827, 154, 45),
            "flow": (620, 1827, 730, 45)
        },
        "M19": {
            "name": (172, 1887, 154, 45),
            "flow": (620, 1887, 730, 45)
        },
        "M24_YIZHUANG": {
            "name": (172, 2066, 154, 45),
            "flow": (620, 2066, 730, 45)
        },
        "M25_FANGSHAN": {
            "name": (172, 2006, 154, 45),
            "flow": (620, 2006, 730, 45)
        },
        "YANFANG": {
            "name": (172, 2126, 154, 45),
            "flow": (620, 2126, 730, 45)
        },
        "M26_S1": {
            "name": (172, 2185, 154, 45),
            "flow": (620, 2185, 730, 45)
        },
        "M27_CHANGPING": {
            "name": (172, 1947, 154, 45),
            "flow": (620, 1947, 730, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (172, 2365, 154, 45),
            "flow": (620, 2365, 730, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (172, 2424, 154, 45),
            "flow": (620, 2424, 730, 45)
        },
        "XIJIAO": {
            "name": (172, 2305, 154, 45),
            "flow": (620, 2305, 730, 45)
        },
        "YIZHUANGT1": {
            "name": (172, 2245, 154, 45),
            "flow": (620, 2245, 730, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 250, 695, 240, 45)
    png_flow = img_cut_center(png, 265, 752, 270, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  145).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_08_03(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (172, 940, 154, 45),
            "flow": (624, 940, 732, 45)
        },
        "M2": {
            "name": (172, 999, 154, 45),
            "flow": (624, 999, 732, 45)
        },
        "M4DAXING": {
            "name": (172, 1057, 154, 45),
            "flow": (624, 1057, 732, 45)
        },
        "M5": {
            "name": (172, 1116, 154, 45),
            "flow": (624, 1116, 732, 45)
        },
        "M6": {
            "name": (172, 1174, 154, 45),
            "flow": (624, 1174, 732, 45)
        },
        "M7": {
            "name": (172, 1233, 154, 45),
            "flow": (624, 1233, 732, 45)
        },
        "M8": {
            "name": (172, 1291, 154, 45),
            "flow": (624, 1291, 732, 45)
        },
        "M9": {
            "name": (172, 1350, 154, 45),
            "flow": (624, 1350, 732, 45)
        },
        "M10": {
            "name": (172, 1408, 154, 45),
            "flow": (624, 1408, 732, 45)
        },
        "M11": {
            "name": (172, 1467, 154, 45),
            "flow": (624, 1467, 732, 45)
        },
        "M13": {
            "name": (172, 1526, 154, 45),
            "flow": (624, 1526, 732, 45)
        },
        "M14": {
            "name": (172, 1584, 154, 45),
            "flow": (624, 1584, 732, 45)
        },
        "M15": {
            "name": (172, 1643, 154, 45),
            "flow": (624, 1643, 732, 45)
        },
        "M16": {
            "name": (172, 1701, 154, 45),
            "flow": (624, 1701, 732, 45)
        },
        "M17S": {
            "name": (172, 1760, 154, 45),
            "flow": (624, 1760, 732, 45)
        },
        "M17N": {
            "name": (172, 1818, 154, 45),
            "flow": (624, 1818, 732, 45)
        },
        "M19": {
            "name": (172, 1877, 154, 45),
            "flow": (624, 1877, 732, 45)
        },
        "M24_YIZHUANG": {
            "name": (172, 2053, 154, 45),
            "flow": (624, 2053, 732, 45)
        },
        "M25_FANGSHAN": {
            "name": (172, 1994, 154, 45),
            "flow": (624, 1994, 732, 45)
        },
        "YANFANG": {
            "name": (172, 2111, 154, 45),
            "flow": (624, 2111, 732, 45)
        },
        "M26_S1": {
            "name": (172, 2170, 154, 45),
            "flow": (624, 2170, 732, 45)
        },
        "M27_CHANGPING": {
            "name": (172, 1936, 154, 45),
            "flow": (624, 1936, 732, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (172, 2345, 154, 45),
            "flow": (624, 2345, 732, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (172, 2404, 154, 45),
            "flow": (624, 2404, 732, 45)
        },
        "XIJIAO": {
            "name": (172, 2287, 154, 45),
            "flow": (624, 2287, 732, 45)
        },
        "YIZHUANGT1": {
            "name": (172, 2228, 154, 45),
            "flow": (624, 2228, 732, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 250, 695, 240, 45)
    png_flow = img_cut_center(png, 265, 752, 270, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  145).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_07_13_2024_08_02(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (172, 930, 154, 45),
            "flow": (620, 930, 730, 45)
        },
        "M2": {
            "name": (172, 990, 154, 45),
            "flow": (620, 990, 730, 45)
        },
        "M4DAXING": {
            "name": (172, 1050, 154, 45),
            "flow": (620, 1050, 730, 45)
        },
        "M5": {
            "name": (172, 1110, 154, 45),
            "flow": (620, 1110, 730, 45)
        },
        "M6": {
            "name": (172, 1170, 154, 45),
            "flow": (620, 1170, 730, 45)
        },
        "M7": {
            "name": (172, 1230, 154, 45),
            "flow": (620, 1230, 730, 45)
        },
        "M8": {
            "name": (172, 1290, 154, 45),
            "flow": (620, 1290, 730, 45)
        },
        "M9": {
            "name": (172, 1349, 154, 45),
            "flow": (620, 1349, 730, 45)
        },
        "M10": {
            "name": (172, 1409, 154, 45),
            "flow": (620, 1409, 730, 45)
        },
        "M11": {
            "name": (172, 1469, 154, 45),
            "flow": (620, 1469, 730, 45)
        },
        "M13": {
            "name": (172, 1528, 154, 45),
            "flow": (620, 1528, 730, 45)
        },
        "M14": {
            "name": (172, 1588, 154, 45),
            "flow": (620, 1588, 730, 45)
        },
        "M15": {
            "name": (172, 1648, 154, 45),
            "flow": (620, 1648, 730, 45)
        },
        "M16": {
            "name": (172, 1708, 154, 45),
            "flow": (620, 1708, 730, 45)
        },
        "M17S": {
            "name": (172, 1768, 154, 45),
            "flow": (620, 1768, 730, 45)
        },
        "M17N": {
            "name": (172, 1827, 154, 45),
            "flow": (620, 1827, 730, 45)
        },
        "M19": {
            "name": (172, 1887, 154, 45),
            "flow": (620, 1887, 730, 45)
        },
        "M24_YIZHUANG": {
            "name": (172, 2066, 154, 45),
            "flow": (620, 2066, 730, 45)
        },
        "M25_FANGSHAN": {
            "name": (172, 2006, 154, 45),
            "flow": (620, 2006, 730, 45)
        },
        "YANFANG": {
            "name": (172, 2126, 154, 45),
            "flow": (620, 2126, 730, 45)
        },
        "M26_S1": {
            "name": (172, 2185, 154, 45),
            "flow": (620, 2185, 730, 45)
        },
        "M27_CHANGPING": {
            "name": (172, 1947, 154, 45),
            "flow": (620, 1947, 730, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (172, 2365, 154, 45),
            "flow": (620, 2365, 730, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (172, 2424, 154, 45),
            "flow": (620, 2424, 730, 45)
        },
        "XIJIAO": {
            "name": (172, 2305, 154, 45),
            "flow": (620, 2305, 730, 45)
        },
        "YIZHUANGT1": {
            "name": (172, 2245, 154, 45),
            "flow": (620, 2245, 730, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 250, 695, 240, 45)
    png_flow = img_cut_center(png, 265, 752, 270, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  145).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_07_10_2024_07_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {
        "M1BATONG": {
            "name": (218, 928, 150, 45),
            "flow": (619, 928, 635, 45)
        },
        "M2": {
            "name": (218, 988, 150, 45),
            "flow": (619, 988, 635, 45)
        },
        "M4DAXING": {
            "name": (218, 1046, 150, 45),
            "flow": (619, 1046, 635, 45)
        },
        "M5": {
            "name": (218, 1106, 150, 45),
            "flow": (619, 1106, 635, 45)
        },
        "M6": {
            "name": (218, 1164, 150, 45),
            "flow": (619, 1164, 635, 45)
        },
        "M7": {
            "name": (218, 1224, 150, 45),
            "flow": (619, 1224, 635, 45)
        },
        "M8": {
            "name": (218, 1282, 150, 45),
            "flow": (619, 1282, 635, 45)
        },
        "M9": {
            "name": (218, 1342, 150, 45),
            "flow": (619, 1342, 635, 45)
        },
        "M10": {
            "name": (218, 1400, 150, 45),
            "flow": (619, 1400, 635, 45)
        },
        "M11": {
            "name": (218, 1460, 150, 45),
            "flow": (619, 1460, 635, 45)
        },
        "M13": {
            "name": (218, 1518, 150, 45),
            "flow": (619, 1518, 635, 45)
        },
        "M14": {
            "name": (218, 1578, 150, 45),
            "flow": (619, 1578, 635, 45)
        },
        "M15": {
            "name": (218, 1636, 150, 45),
            "flow": (619, 1636, 635, 45)
        },
        "M16": {
            "name": (218, 1696, 150, 45),
            "flow": (619, 1696, 635, 45)
        },
        "M17S": {
            "name": (218, 1754, 150, 45),
            "flow": (619, 1754, 635, 45)
        },
        "M17N": {
            "name": (218, 1814, 150, 45),
            "flow": (619, 1814, 635, 45)
        },
        "M19": {
            "name": (218, 1872, 150, 45),
            "flow": (619, 1872, 635, 45)
        },
        "M24_YIZHUANG": {
            "name": (218, 2050, 150, 45),
            "flow": (619, 2050, 635, 45)
        },
        "M25_FANGSHAN": {
            "name": (218, 1990, 150, 45),
            "flow": (619, 1990, 635, 45)
        },
        "YANFANG": {
            "name": (218, 2108, 150, 45),
            "flow": (619, 2108, 635, 45)
        },
        "M26_S1": {
            "name": (218, 2168, 150, 45),
            "flow": (619, 2168, 635, 45)
        },
        "M27_CHANGPING": {
            "name": (218, 1932, 150, 45),
            "flow": (619, 1932, 635, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (218, 2344, 150, 45),
            "flow": (619, 2344, 635, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (218, 2404, 150, 45),
            "flow": (619, 2404, 635, 45)
        },
        "XIJIAO": {
            "name": (218, 2286, 150, 45),
            "flow": (619, 2286, 635, 45)
        },
        "YIZHUANGT1": {
            "name": (218, 2226, 150, 45),
            "flow": (619, 2226, 635, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 256, 700, 270, 45)
    png_flow = img_cut_center(png, 278, 758, 315, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  160).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_05_30_2024_07_09(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (172, 930, 154, 45),
            "flow": (620, 930, 730, 45)
        },
        "M2": {
            "name": (172, 990, 154, 45),
            "flow": (620, 990, 730, 45)
        },
        "M4DAXING": {
            "name": (172, 1050, 154, 45),
            "flow": (620, 1050, 730, 45)
        },
        "M5": {
            "name": (172, 1110, 154, 45),
            "flow": (620, 1110, 730, 45)
        },
        "M6": {
            "name": (172, 1170, 154, 45),
            "flow": (620, 1170, 730, 45)
        },
        "M7": {
            "name": (172, 1230, 154, 45),
            "flow": (620, 1230, 730, 45)
        },
        "M8": {
            "name": (172, 1290, 154, 45),
            "flow": (620, 1290, 730, 45)
        },
        "M9": {
            "name": (172, 1349, 154, 45),
            "flow": (620, 1349, 730, 45)
        },
        "M10": {
            "name": (172, 1409, 154, 45),
            "flow": (620, 1409, 730, 45)
        },
        "M11": {
            "name": (172, 1469, 154, 45),
            "flow": (620, 1469, 730, 45)
        },
        "M13": {
            "name": (172, 1528, 154, 45),
            "flow": (620, 1528, 730, 45)
        },
        "M14": {
            "name": (172, 1588, 154, 45),
            "flow": (620, 1588, 730, 45)
        },
        "M15": {
            "name": (172, 1648, 154, 45),
            "flow": (620, 1648, 730, 45)
        },
        "M16": {
            "name": (172, 1708, 154, 45),
            "flow": (620, 1708, 730, 45)
        },
        "M17S": {
            "name": (172, 1768, 154, 45),
            "flow": (620, 1768, 730, 45)
        },
        "M17N": {
            "name": (172, 1827, 154, 45),
            "flow": (620, 1827, 730, 45)
        },
        "M19": {
            "name": (172, 1887, 154, 45),
            "flow": (620, 1887, 730, 45)
        },
        "M24_YIZHUANG": {
            "name": (172, 2066, 154, 45),
            "flow": (620, 2066, 730, 45)
        },
        "M25_FANGSHAN": {
            "name": (172, 2006, 154, 45),
            "flow": (620, 2006, 730, 45)
        },
        "YANFANG": {
            "name": (172, 2126, 154, 45),
            "flow": (620, 2126, 730, 45)
        },
        "M26_S1": {
            "name": (172, 2185, 154, 45),
            "flow": (620, 2185, 730, 45)
        },
        "M27_CHANGPING": {
            "name": (172, 1947, 154, 45),
            "flow": (620, 1947, 730, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (172, 2365, 154, 45),
            "flow": (620, 2365, 730, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (172, 2424, 154, 45),
            "flow": (620, 2424, 730, 45)
        },
        "XIJIAO": {
            "name": (172, 2305, 154, 45),
            "flow": (620, 2305, 730, 45)
        },
        "YIZHUANGT1": {
            "name": (172, 2245, 154, 45),
            "flow": (620, 2245, 730, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 250, 695, 240, 45)
    png_flow = img_cut_center(png, 265, 752, 270, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  145).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_05_29(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {
        "M1BATONG": {
            "name": (208, 913, 154, 45),
            "flow": (625, 913, 666, 45)
        },
        "M2": {
            "name": (208, 973, 154, 45),
            "flow": (625, 973, 666, 45)
        },
        "M4DAXING": {
            "name": (208, 1033, 154, 45),
            "flow": (625, 1033, 666, 45)
        },
        "M5": {
            "name": (208, 1093, 154, 45),
            "flow": (625, 1093, 666, 45)
        },
        "M6": {
            "name": (208, 1153, 154, 45),
            "flow": (625, 1153, 666, 45)
        },
        "M7": {
            "name": (208, 1213, 154, 45),
            "flow": (625, 1213, 666, 45)
        },
        "M8": {
            "name": (208, 1273, 154, 45),
            "flow": (625, 1273, 666, 45)
        },
        "M9": {
            "name": (208, 1332, 154, 45),
            "flow": (625, 1332, 666, 45)
        },
        "M10": {
            "name": (208, 1392, 154, 45),
            "flow": (625, 1392, 666, 45)
        },
        "M11": {
            "name": (208, 1452, 154, 45),
            "flow": (625, 1452, 666, 45)
        },
        "M13": {
            "name": (208, 1511, 154, 45),
            "flow": (625, 1511, 666, 45)
        },
        "M14": {
            "name": (208, 1571, 154, 45),
            "flow": (625, 1571, 666, 45)
        },
        "M15": {
            "name": (208, 1631, 154, 45),
            "flow": (625, 1631, 666, 45)
        },
        "M16": {
            "name": (208, 1691, 154, 45),
            "flow": (625, 1691, 666, 45)
        },
        "M17S": {
            "name": (208, 1751, 154, 45),
            "flow": (625, 1751, 666, 45)
        },
        "M17N": {
            "name": (208, 1810, 154, 45),
            "flow": (625, 1810, 666, 45)
        },
        "M19": {
            "name": (208, 1870, 154, 45),
            "flow": (625, 1870, 666, 45)
        },
        "M24_YIZHUANG": {
            "name": (208, 2049, 154, 45),
            "flow": (625, 2049, 666, 45)
        },
        "M25_FANGSHAN": {
            "name": (208, 1989, 154, 45),
            "flow": (625, 1989, 666, 45)
        },
        "YANFANG": {
            "name": (208, 2109, 154, 45),
            "flow": (625, 2109, 666, 45)
        },
        "M26_S1": {
            "name": (208, 2168, 154, 45),
            "flow": (625, 2168, 666, 45)
        },
        "M27_CHANGPING": {
            "name": (208, 1930, 154, 45),
            "flow": (625, 1930, 666, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (208, 2348, 154, 45),
            "flow": (625, 2348, 666, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (208, 2407, 154, 45),
            "flow": (625, 2407, 666, 45)
        },
        "XIJIAO": {
            "name": (208, 2288, 154, 45),
            "flow": (625, 2288, 666, 45)
        },
        "YIZHUANGT1": {
            "name": (208, 2228, 154, 45),
            "flow": (625, 2228, 666, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 259, 695, 255, 45)
    png_flow = img_cut_center(png, 280, 752, 295, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  145).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_04_02_2024_05_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (172, 930, 154, 45),
            "flow": (620, 930, 730, 45)
        },
        "M2": {
            "name": (172, 990, 154, 45),
            "flow": (620, 990, 730, 45)
        },
        "M4DAXING": {
            "name": (172, 1050, 154, 45),
            "flow": (620, 1050, 730, 45)
        },
        "M5": {
            "name": (172, 1110, 154, 45),
            "flow": (620, 1110, 730, 45)
        },
        "M6": {
            "name": (172, 1170, 154, 45),
            "flow": (620, 1170, 730, 45)
        },
        "M7": {
            "name": (172, 1230, 154, 45),
            "flow": (620, 1230, 730, 45)
        },
        "M8": {
            "name": (172, 1290, 154, 45),
            "flow": (620, 1290, 730, 45)
        },
        "M9": {
            "name": (172, 1349, 154, 45),
            "flow": (620, 1349, 730, 45)
        },
        "M10": {
            "name": (172, 1409, 154, 45),
            "flow": (620, 1409, 730, 45)
        },
        "M11": {
            "name": (172, 1469, 154, 45),
            "flow": (620, 1469, 730, 45)
        },
        "M13": {
            "name": (172, 1528, 154, 45),
            "flow": (620, 1528, 730, 45)
        },
        "M14": {
            "name": (172, 1588, 154, 45),
            "flow": (620, 1588, 730, 45)
        },
        "M15": {
            "name": (172, 1648, 154, 45),
            "flow": (620, 1648, 730, 45)
        },
        "M16": {
            "name": (172, 1708, 154, 45),
            "flow": (620, 1708, 730, 45)
        },
        "M17S": {
            "name": (172, 1768, 154, 45),
            "flow": (620, 1768, 730, 45)
        },
        "M17N": {
            "name": (172, 1827, 154, 45),
            "flow": (620, 1827, 730, 45)
        },
        "M19": {
            "name": (172, 1887, 154, 45),
            "flow": (620, 1887, 730, 45)
        },
        "M24_YIZHUANG": {
            "name": (172, 2066, 154, 45),
            "flow": (620, 2066, 730, 45)
        },
        "M25_FANGSHAN": {
            "name": (172, 2006, 154, 45),
            "flow": (620, 2006, 730, 45)
        },
        "YANFANG": {
            "name": (172, 2126, 154, 45),
            "flow": (620, 2126, 730, 45)
        },
        "M26_S1": {
            "name": (172, 2185, 154, 45),
            "flow": (620, 2185, 730, 45)
        },
        "M27_CHANGPING": {
            "name": (172, 1947, 154, 45),
            "flow": (620, 1947, 730, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (172, 2365, 154, 45),
            "flow": (620, 2365, 730, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (172, 2424, 154, 45),
            "flow": (620, 2424, 730, 45)
        },
        "XIJIAO": {
            "name": (172, 2305, 154, 45),
            "flow": (620, 2305, 730, 45)
        },
        "YIZHUANGT1": {
            "name": (172, 2245, 154, 45),
            "flow": (620, 2245, 730, 45)
        }
    }

    # 裁剪图片
    png_date = img_cut_center(png, 250, 695, 240, 45)
    png_flow = img_cut_center(png, 265, 752, 270, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  145).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_31_2024_04_01(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_29_2024_03_30(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (65, 113, 120, 30),
            "flow": (424, 113, 585, 45)
        },
        "M2": {
            "name": (65, 161, 120, 30),
            "flow": (424, 161, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 355, 120, 30),
            "flow": (424, 355, 585, 45)
        },
        "M8": {
            "name": (65, 403, 120, 30),
            "flow": (424, 403, 585, 45)
        },
        "M9": {
            "name": (65, 451, 120, 30),
            "flow": (424, 451, 585, 45)
        },
        "M10": {
            "name": (65, 500, 120, 30),
            "flow": (424, 500, 585, 45)
        },
        "M11": {
            "name": (65, 548, 120, 30),
            "flow": (424, 548, 585, 45)
        },
        "M13": {
            "name": (65, 596, 120, 30),
            "flow": (424, 596, 585, 45)
        },
        "M14": {
            "name": (65, 645, 120, 30),
            "flow": (424, 645, 585, 45)
        },
        "M15": {
            "name": (65, 693, 120, 30),
            "flow": (424, 693, 585, 45)
        },
        "M16": {
            "name": (65, 741, 120, 30),
            "flow": (424, 741, 585, 45)
        },
        "M17S": {
            "name": (65, 789, 120, 30),
            "flow": (424, 789, 585, 45)
        },
        "M17N": {
            "name": (65, 838, 120, 30),
            "flow": (424, 838, 585, 45)
        },
        "M19": {
            "name": (65, 886, 120, 30),
            "flow": (424, 886, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1031, 120, 30),
            "flow": (424, 1031, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 983, 120, 30),
            "flow": (424, 983, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1079, 120, 30),
            "flow": (424, 1079, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1128, 120, 30),
            "flow": (424, 1128, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 934, 120, 30),
            "flow": (424, 934, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1273, 120, 30),
            "flow": (424, 1273, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1321, 120, 30),
            "flow": (424, 1321, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1224, 120, 30),
            "flow": (424, 1224, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1176, 120, 30),
            "flow": (424, 1176, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_25_2024_03_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_22_2024_03_24(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (65, 113, 120, 30),
            "flow": (424, 113, 585, 45)
        },
        "M2": {
            "name": (65, 161, 120, 30),
            "flow": (424, 161, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 355, 120, 30),
            "flow": (424, 355, 585, 45)
        },
        "M8": {
            "name": (65, 403, 120, 30),
            "flow": (424, 403, 585, 45)
        },
        "M9": {
            "name": (65, 451, 120, 30),
            "flow": (424, 451, 585, 45)
        },
        "M10": {
            "name": (65, 500, 120, 30),
            "flow": (424, 500, 585, 45)
        },
        "M11": {
            "name": (65, 548, 120, 30),
            "flow": (424, 548, 585, 45)
        },
        "M13": {
            "name": (65, 596, 120, 30),
            "flow": (424, 596, 585, 45)
        },
        "M14": {
            "name": (65, 645, 120, 30),
            "flow": (424, 645, 585, 45)
        },
        "M15": {
            "name": (65, 693, 120, 30),
            "flow": (424, 693, 585, 45)
        },
        "M16": {
            "name": (65, 741, 120, 30),
            "flow": (424, 741, 585, 45)
        },
        "M17S": {
            "name": (65, 789, 120, 30),
            "flow": (424, 789, 585, 45)
        },
        "M17N": {
            "name": (65, 838, 120, 30),
            "flow": (424, 838, 585, 45)
        },
        "M19": {
            "name": (65, 886, 120, 30),
            "flow": (424, 886, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1031, 120, 30),
            "flow": (424, 1031, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 983, 120, 30),
            "flow": (424, 983, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1079, 120, 30),
            "flow": (424, 1079, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1128, 120, 30),
            "flow": (424, 1128, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 934, 120, 30),
            "flow": (424, 934, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1273, 120, 30),
            "flow": (424, 1273, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1321, 120, 30),
            "flow": (424, 1321, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1224, 120, 30),
            "flow": (424, 1224, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1176, 120, 30),
            "flow": (424, 1176, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
        luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
        rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
        ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
        rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
        rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
        ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
        ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
        
        png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
        png_det_array = np.array(png_det)       

        globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
        globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_17_2024_03_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_15_2024_03_16(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (65, 113, 120, 30),
            "flow": (424, 113, 585, 45)
        },
        "M2": {
            "name": (65, 161, 120, 30),
            "flow": (424, 161, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 355, 120, 30),
            "flow": (424, 355, 585, 45)
        },
        "M8": {
            "name": (65, 403, 120, 30),
            "flow": (424, 403, 585, 45)
        },
        "M9": {
            "name": (65, 451, 120, 30),
            "flow": (424, 451, 585, 45)
        },
        "M10": {
            "name": (65, 500, 120, 30),
            "flow": (424, 500, 585, 45)
        },
        "M11": {
            "name": (65, 548, 120, 30),
            "flow": (424, 548, 585, 45)
        },
        "M13": {
            "name": (65, 596, 120, 30),
            "flow": (424, 596, 585, 45)
        },
        "M14": {
            "name": (65, 645, 120, 30),
            "flow": (424, 645, 585, 45)
        },
        "M15": {
            "name": (65, 693, 120, 30),
            "flow": (424, 693, 585, 45)
        },
        "M16": {
            "name": (65, 741, 120, 30),
            "flow": (424, 741, 585, 45)
        },
        "M17S": {
            "name": (65, 789, 120, 30),
            "flow": (424, 789, 585, 45)
        },
        "M17N": {
            "name": (65, 838, 120, 30),
            "flow": (424, 838, 585, 45)
        },
        "M19": {
            "name": (65, 886, 120, 30),
            "flow": (424, 886, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1031, 120, 30),
            "flow": (424, 1031, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 983, 120, 30),
            "flow": (424, 983, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1079, 120, 30),
            "flow": (424, 1079, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1128, 120, 30),
            "flow": (424, 1128, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 934, 120, 30),
            "flow": (424, 934, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1273, 120, 30),
            "flow": (424, 1273, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1321, 120, 30),
            "flow": (424, 1321, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1224, 120, 30),
            "flow": (424, 1224, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1176, 120, 30),
            "flow": (424, 1176, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_12_2024_03_14(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (65, 113, 120, 30),
            "flow": (424, 113, 585, 45)
        },
        "M2": {
            "name": (65, 161, 120, 30),
            "flow": (424, 161, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 355, 120, 30),
            "flow": (424, 355, 585, 45)
        },
        "M8": {
            "name": (65, 403, 120, 30),
            "flow": (424, 403, 585, 45)
        },
        "M9": {
            "name": (65, 451, 120, 30),
            "flow": (424, 451, 585, 45)
        },
        "M10": {
            "name": (65, 500, 120, 30),
            "flow": (424, 500, 585, 45)
        },
        "M11": {
            "name": (65, 548, 120, 30),
            "flow": (424, 548, 585, 45)
        },
        "M13": {
            "name": (65, 596, 120, 30),
            "flow": (424, 596, 585, 45)
        },
        "M14": {
            "name": (65, 645, 120, 30),
            "flow": (424, 645, 585, 45)
        },
        "M15": {
            "name": (65, 693, 120, 30),
            "flow": (424, 693, 585, 45)
        },
        "M16": {
            "name": (65, 741, 120, 30),
            "flow": (424, 741, 585, 45)
        },
        "M17S": {
            "name": (65, 789, 120, 30),
            "flow": (424, 789, 585, 45)
        },
        "M17N": {
            "name": (65, 838, 120, 30),
            "flow": (424, 838, 585, 45)
        },
        "M19": {
            "name": (65, 886, 120, 30),
            "flow": (424, 886, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1031, 120, 30),
            "flow": (424, 1031, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 983, 120, 30),
            "flow": (424, 983, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1079, 120, 30),
            "flow": (424, 1079, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1128, 120, 30),
            "flow": (424, 1128, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 934, 120, 30),
            "flow": (424, 934, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1273, 120, 30),
            "flow": (424, 1273, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1321, 120, 30),
            "flow": (424, 1321, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1224, 120, 30),
            "flow": (424, 1224, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1176, 120, 30),
            "flow": (424, 1176, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_10(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_08_2024_03_09(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (65, 113, 120, 30),
            "flow": (424, 113, 585, 45)
        },
        "M2": {
            "name": (65, 161, 120, 30),
            "flow": (424, 161, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 355, 120, 30),
            "flow": (424, 355, 585, 45)
        },
        "M8": {
            "name": (65, 403, 120, 30),
            "flow": (424, 403, 585, 45)
        },
        "M9": {
            "name": (65, 451, 120, 30),
            "flow": (424, 451, 585, 45)
        },
        "M10": {
            "name": (65, 500, 120, 30),
            "flow": (424, 500, 585, 45)
        },
        "M11": {
            "name": (65, 548, 120, 30),
            "flow": (424, 548, 585, 45)
        },
        "M13": {
            "name": (65, 596, 120, 30),
            "flow": (424, 596, 585, 45)
        },
        "M14": {
            "name": (65, 645, 120, 30),
            "flow": (424, 645, 585, 45)
        },
        "M15": {
            "name": (65, 693, 120, 30),
            "flow": (424, 693, 585, 45)
        },
        "M16": {
            "name": (65, 741, 120, 30),
            "flow": (424, 741, 585, 45)
        },
        "M17S": {
            "name": (65, 789, 120, 30),
            "flow": (424, 789, 585, 45)
        },
        "M17N": {
            "name": (65, 838, 120, 30),
            "flow": (424, 838, 585, 45)
        },
        "M19": {
            "name": (65, 886, 120, 30),
            "flow": (424, 886, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1031, 120, 30),
            "flow": (424, 1031, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 983, 120, 30),
            "flow": (424, 983, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1079, 120, 30),
            "flow": (424, 1079, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1128, 120, 30),
            "flow": (424, 1128, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 934, 120, 30),
            "flow": (424, 934, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1273, 120, 30),
            "flow": (424, 1273, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1321, 120, 30),
            "flow": (424, 1321, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1224, 120, 30),
            "flow": (424, 1224, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1176, 120, 30),
            "flow": (424, 1176, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_03_2024_03_07(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_03_01_2024_03_02(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (65, 113, 120, 30),
            "flow": (424, 113, 585, 45)
        },
        "M2": {
            "name": (65, 161, 120, 30),
            "flow": (424, 161, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 355, 120, 30),
            "flow": (424, 355, 585, 45)
        },
        "M8": {
            "name": (65, 403, 120, 30),
            "flow": (424, 403, 585, 45)
        },
        "M9": {
            "name": (65, 451, 120, 30),
            "flow": (424, 451, 585, 45)
        },
        "M10": {
            "name": (65, 500, 120, 30),
            "flow": (424, 500, 585, 45)
        },
        "M11": {
            "name": (65, 548, 120, 30),
            "flow": (424, 548, 585, 45)
        },
        "M13": {
            "name": (65, 596, 120, 30),
            "flow": (424, 596, 585, 45)
        },
        "M14": {
            "name": (65, 645, 120, 30),
            "flow": (424, 645, 585, 45)
        },
        "M15": {
            "name": (65, 693, 120, 30),
            "flow": (424, 693, 585, 45)
        },
        "M16": {
            "name": (65, 741, 120, 30),
            "flow": (424, 741, 585, 45)
        },
        "M17S": {
            "name": (65, 789, 120, 30),
            "flow": (424, 789, 585, 45)
        },
        "M17N": {
            "name": (65, 838, 120, 30),
            "flow": (424, 838, 585, 45)
        },
        "M19": {
            "name": (65, 886, 120, 30),
            "flow": (424, 886, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1031, 120, 30),
            "flow": (424, 1031, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 983, 120, 30),
            "flow": (424, 983, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1079, 120, 30),
            "flow": (424, 1079, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1128, 120, 30),
            "flow": (424, 1128, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 934, 120, 30),
            "flow": (424, 934, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1273, 120, 30),
            "flow": (424, 1273, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1321, 120, 30),
            "flow": (424, 1321, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1224, 120, 30),
            "flow": (424, 1224, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1176, 120, 30),
            "flow": (424, 1176, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_02_25_2024_02_29(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_02_23_2024_02_24(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (65, 113, 120, 30),
            "flow": (424, 113, 585, 45)
        },
        "M2": {
            "name": (65, 161, 120, 30),
            "flow": (424, 161, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 355, 120, 30),
            "flow": (424, 355, 585, 45)
        },
        "M8": {
            "name": (65, 403, 120, 30),
            "flow": (424, 403, 585, 45)
        },
        "M9": {
            "name": (65, 451, 120, 30),
            "flow": (424, 451, 585, 45)
        },
        "M10": {
            "name": (65, 500, 120, 30),
            "flow": (424, 500, 585, 45)
        },
        "M11": {
            "name": (65, 548, 120, 30),
            "flow": (424, 548, 585, 45)
        },
        "M13": {
            "name": (65, 596, 120, 30),
            "flow": (424, 596, 585, 45)
        },
        "M14": {
            "name": (65, 645, 120, 30),
            "flow": (424, 645, 585, 45)
        },
        "M15": {
            "name": (65, 693, 120, 30),
            "flow": (424, 693, 585, 45)
        },
        "M16": {
            "name": (65, 741, 120, 30),
            "flow": (424, 741, 585, 45)
        },
        "M17S": {
            "name": (65, 789, 120, 30),
            "flow": (424, 789, 585, 45)
        },
        "M17N": {
            "name": (65, 838, 120, 30),
            "flow": (424, 838, 585, 45)
        },
        "M19": {
            "name": (65, 886, 120, 30),
            "flow": (424, 886, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1031, 120, 30),
            "flow": (424, 1031, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 983, 120, 30),
            "flow": (424, 983, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1079, 120, 30),
            "flow": (424, 1079, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1128, 120, 30),
            "flow": (424, 1128, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 934, 120, 30),
            "flow": (424, 934, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1273, 120, 30),
            "flow": (424, 1273, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1321, 120, 30),
            "flow": (424, 1321, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1224, 120, 30),
            "flow": (424, 1224, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1176, 120, 30),
            "flow": (424, 1176, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_02_17_2024_02_22(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
            
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_02_08_2024_02_16(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (65, 115, 120, 30),
            "flow": (424, 115, 585, 45)
        },
        "M2": {
            "name": (65, 163, 120, 30),
            "flow": (424, 163, 585, 45)
        },
        "M4DAXING": {
            "name": (65, 210, 120, 30),
            "flow": (424, 210, 585, 45)
        },
        "M5": {
            "name": (65, 258, 120, 30),
            "flow": (424, 258, 585, 45)
        },
        "M6": {
            "name": (65, 306, 120, 30),
            "flow": (424, 306, 585, 45)
        },
        "M7": {
            "name": (65, 353, 120, 30),
            "flow": (424, 353, 585, 45)
        },
        "M8": {
            "name": (65, 401, 120, 30),
            "flow": (424, 401, 585, 45)
        },
        "M9": {
            "name": (65, 448, 120, 30),
            "flow": (424, 448, 585, 45)
        },
        "M10": {
            "name": (65, 496, 120, 30),
            "flow": (424, 496, 585, 45)
        },
        "M11": {
            "name": (65, 544, 120, 30),
            "flow": (424, 544, 585, 45)
        },
        "M13": {
            "name": (65, 591, 120, 30),
            "flow": (424, 591, 585, 45)
        },
        "M14": {
            "name": (65, 639, 120, 30),
            "flow": (424, 639, 585, 45)
        },
        "M15": {
            "name": (65, 687, 120, 30),
            "flow": (424, 687, 585, 45)
        },
        "M16": {
            "name": (65, 734, 120, 30),
            "flow": (424, 734, 585, 45)
        },
        "M17S": {
            "name": (65, 782, 120, 30),
            "flow": (424, 782, 585, 45)
        },
        "M17N": {
            "name": (65, 830, 120, 30),
            "flow": (424, 830, 585, 45)
        },
        "M19": {
            "name": (65, 877, 120, 30),
            "flow": (424, 877, 585, 45)
        },
        "M24_YIZHUANG": {
            "name": (65, 1020, 120, 30),
            "flow": (424, 1020, 585, 45)
        },
        "M25_FANGSHAN": {
            "name": (65, 973, 120, 30),
            "flow": (424, 973, 585, 45)
        },
        "YANFANG": {
            "name": (65, 1068, 120, 30),
            "flow": (424, 1068, 585, 45)
        },
        "M26_S1": {
            "name": (65, 1115, 120, 30),
            "flow": (424, 1115, 585, 45)
        },
        "M27_CHANGPING": {
            "name": (65, 925, 120, 30),
            "flow": (424, 925, 585, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (65, 1258, 120, 30),
            "flow": (424, 1258, 585, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (65, 1306, 120, 30),
            "flow": (424, 1306, 585, 45)
        },
        "XIJIAO": {
            "name": (65, 1211, 120, 30),
            "flow": (424, 1211, 585, 45)
        },
        "YIZHUANGT1": {
            "name": (65, 1163, 120, 30),
            "flow": (424, 1163, 585, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_02_03_2024_02_07(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_02_02(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 159, 185, 45),
            "flow": (637, 159, 880, 45)
        },
        "M2": {
            "name": (96, 225, 185, 45),
            "flow": (637, 225, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 291, 185, 45),
            "flow": (637, 291, 880, 45)
        },
        "M5": {
            "name": (96, 358, 185, 45),
            "flow": (637, 358, 880, 45)
        },
        "M6": {
            "name": (96, 424, 185, 45),
            "flow": (637, 424, 880, 45)
        },
        "M7": {
            "name": (96, 490, 185, 45),
            "flow": (637, 490, 880, 45)
        },
        "M8": {
            "name": (96, 556, 185, 45),
            "flow": (637, 556, 880, 45)
        },
        "M9": {
            "name": (96, 622, 185, 45),
            "flow": (637, 622, 880, 45)
        },
        "M10": {
            "name": (96, 689, 185, 45),
            "flow": (637, 689, 880, 45)
        },
        "M11": {
            "name": (96, 755, 185, 45),
            "flow": (637, 755, 880, 45)
        },
        "M13": {
            "name": (96, 821, 185, 45),
            "flow": (637, 821, 880, 45)
        },
        "M14": {
            "name": (96, 887, 185, 45),
            "flow": (637, 887, 880, 45)
        },
        "M15": {
            "name": (96, 953, 185, 45),
            "flow": (637, 953, 880, 45)
        },
        "M16": {
            "name": (96, 1020, 185, 45),
            "flow": (637, 1020, 880, 45)
        },
        "M17S": {
            "name": (96, 1086, 185, 45),
            "flow": (637, 1086, 880, 45)
        },
        "M17N": {
            "name": (96, 1152, 185, 45),
            "flow": (637, 1152, 880, 45)
        },
        "M19": {
            "name": (96, 1218, 185, 45),
            "flow": (637, 1218, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1417, 185, 45),
            "flow": (637, 1417, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1351, 185, 45),
            "flow": (637, 1351, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1483, 185, 45),
            "flow": (637, 1483, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1549, 185, 45),
            "flow": (637, 1549, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1284, 185, 45),
            "flow": (637, 1284, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1748, 185, 45),
            "flow": (637, 1748, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1814, 185, 45),
            "flow": (637, 1814, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1682, 185, 45),
            "flow": (637, 1682, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_28_2024_02_01(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_26_2024_01_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 159, 185, 45),
            "flow": (637, 159, 880, 45)
        },
        "M2": {
            "name": (96, 225, 185, 45),
            "flow": (637, 225, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 291, 185, 45),
            "flow": (637, 291, 880, 45)
        },
        "M5": {
            "name": (96, 358, 185, 45),
            "flow": (637, 358, 880, 45)
        },
        "M6": {
            "name": (96, 424, 185, 45),
            "flow": (637, 424, 880, 45)
        },
        "M7": {
            "name": (96, 490, 185, 45),
            "flow": (637, 490, 880, 45)
        },
        "M8": {
            "name": (96, 556, 185, 45),
            "flow": (637, 556, 880, 45)
        },
        "M9": {
            "name": (96, 622, 185, 45),
            "flow": (637, 622, 880, 45)
        },
        "M10": {
            "name": (96, 689, 185, 45),
            "flow": (637, 689, 880, 45)
        },
        "M11": {
            "name": (96, 755, 185, 45),
            "flow": (637, 755, 880, 45)
        },
        "M13": {
            "name": (96, 821, 185, 45),
            "flow": (637, 821, 880, 45)
        },
        "M14": {
            "name": (96, 887, 185, 45),
            "flow": (637, 887, 880, 45)
        },
        "M15": {
            "name": (96, 953, 185, 45),
            "flow": (637, 953, 880, 45)
        },
        "M16": {
            "name": (96, 1020, 185, 45),
            "flow": (637, 1020, 880, 45)
        },
        "M17S": {
            "name": (96, 1086, 185, 45),
            "flow": (637, 1086, 880, 45)
        },
        "M17N": {
            "name": (96, 1152, 185, 45),
            "flow": (637, 1152, 880, 45)
        },
        "M19": {
            "name": (96, 1218, 185, 45),
            "flow": (637, 1218, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1417, 185, 45),
            "flow": (637, 1417, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1351, 185, 45),
            "flow": (637, 1351, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1483, 185, 45),
            "flow": (637, 1483, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1549, 185, 45),
            "flow": (637, 1549, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1284, 185, 45),
            "flow": (637, 1284, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1748, 185, 45),
            "flow": (637, 1748, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1814, 185, 45),
            "flow": (637, 1814, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1682, 185, 45),
            "flow": (637, 1682, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_21_2024_01_25(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_19_2024_01_20(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 159, 185, 45),
            "flow": (637, 159, 880, 45)
        },
        "M2": {
            "name": (96, 225, 185, 45),
            "flow": (637, 225, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 291, 185, 45),
            "flow": (637, 291, 880, 45)
        },
        "M5": {
            "name": (96, 358, 185, 45),
            "flow": (637, 358, 880, 45)
        },
        "M6": {
            "name": (96, 424, 185, 45),
            "flow": (637, 424, 880, 45)
        },
        "M7": {
            "name": (96, 490, 185, 45),
            "flow": (637, 490, 880, 45)
        },
        "M8": {
            "name": (96, 556, 185, 45),
            "flow": (637, 556, 880, 45)
        },
        "M9": {
            "name": (96, 622, 185, 45),
            "flow": (637, 622, 880, 45)
        },
        "M10": {
            "name": (96, 689, 185, 45),
            "flow": (637, 689, 880, 45)
        },
        "M11": {
            "name": (96, 755, 185, 45),
            "flow": (637, 755, 880, 45)
        },
        "M13": {
            "name": (96, 821, 185, 45),
            "flow": (637, 821, 880, 45)
        },
        "M14": {
            "name": (96, 887, 185, 45),
            "flow": (637, 887, 880, 45)
        },
        "M15": {
            "name": (96, 953, 185, 45),
            "flow": (637, 953, 880, 45)
        },
        "M16": {
            "name": (96, 1020, 185, 45),
            "flow": (637, 1020, 880, 45)
        },
        "M17S": {
            "name": (96, 1086, 185, 45),
            "flow": (637, 1086, 880, 45)
        },
        "M17N": {
            "name": (96, 1152, 185, 45),
            "flow": (637, 1152, 880, 45)
        },
        "M19": {
            "name": (96, 1218, 185, 45),
            "flow": (637, 1218, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1417, 185, 45),
            "flow": (637, 1417, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1351, 185, 45),
            "flow": (637, 1351, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1483, 185, 45),
            "flow": (637, 1483, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1549, 185, 45),
            "flow": (637, 1549, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1284, 185, 45),
            "flow": (637, 1284, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1748, 185, 45),
            "flow": (637, 1748, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1814, 185, 45),
            "flow": (637, 1814, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1682, 185, 45),
            "flow": (637, 1682, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_14_2024_01_18(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_12_2024_01_13(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 159, 185, 45),
            "flow": (637, 159, 880, 45)
        },
        "M2": {
            "name": (96, 225, 185, 45),
            "flow": (637, 225, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 291, 185, 45),
            "flow": (637, 291, 880, 45)
        },
        "M5": {
            "name": (96, 358, 185, 45),
            "flow": (637, 358, 880, 45)
        },
        "M6": {
            "name": (96, 424, 185, 45),
            "flow": (637, 424, 880, 45)
        },
        "M7": {
            "name": (96, 490, 185, 45),
            "flow": (637, 490, 880, 45)
        },
        "M8": {
            "name": (96, 556, 185, 45),
            "flow": (637, 556, 880, 45)
        },
        "M9": {
            "name": (96, 622, 185, 45),
            "flow": (637, 622, 880, 45)
        },
        "M10": {
            "name": (96, 689, 185, 45),
            "flow": (637, 689, 880, 45)
        },
        "M11": {
            "name": (96, 755, 185, 45),
            "flow": (637, 755, 880, 45)
        },
        "M13": {
            "name": (96, 821, 185, 45),
            "flow": (637, 821, 880, 45)
        },
        "M14": {
            "name": (96, 887, 185, 45),
            "flow": (637, 887, 880, 45)
        },
        "M15": {
            "name": (96, 953, 185, 45),
            "flow": (637, 953, 880, 45)
        },
        "M16": {
            "name": (96, 1020, 185, 45),
            "flow": (637, 1020, 880, 45)
        },
        "M17S": {
            "name": (96, 1086, 185, 45),
            "flow": (637, 1086, 880, 45)
        },
        "M17N": {
            "name": (96, 1152, 185, 45),
            "flow": (637, 1152, 880, 45)
        },
        "M19": {
            "name": (96, 1218, 185, 45),
            "flow": (637, 1218, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1417, 185, 45),
            "flow": (637, 1417, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1351, 185, 45),
            "flow": (637, 1351, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1483, 185, 45),
            "flow": (637, 1483, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1549, 185, 45),
            "flow": (637, 1549, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1284, 185, 45),
            "flow": (637, 1284, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1748, 185, 45),
            "flow": (637, 1748, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1814, 185, 45),
            "flow": (637, 1814, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1682, 185, 45),
            "flow": (637, 1682, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_07_2024_01_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 173, 185, 45),
            "flow": (637, 173, 880, 45)
        },
        "M2": {
            "name": (96, 245, 185, 45),
            "flow": (637, 245, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 317, 185, 45),
            "flow": (637, 317, 880, 45)
        },
        "M5": {
            "name": (96, 389, 185, 45),
            "flow": (637, 389, 880, 45)
        },
        "M6": {
            "name": (96, 461, 185, 45),
            "flow": (637, 461, 880, 45)
        },
        "M7": {
            "name": (96, 533, 185, 45),
            "flow": (637, 533, 880, 45)
        },
        "M8": {
            "name": (96, 605, 185, 45),
            "flow": (637, 605, 880, 45)
        },
        "M9": {
            "name": (96, 678, 185, 45),
            "flow": (637, 678, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 822, 185, 45),
            "flow": (637, 822, 880, 45)
        },
        "M13": {
            "name": (96, 894, 185, 45),
            "flow": (637, 894, 880, 45)
        },
        "M14": {
            "name": (96, 966, 185, 45),
            "flow": (637, 966, 880, 45)
        },
        "M15": {
            "name": (96, 1038, 185, 45),
            "flow": (637, 1038, 880, 45)
        },
        "M16": {
            "name": (96, 1110, 185, 45),
            "flow": (637, 1110, 880, 45)
        },
        "M17S": {
            "name": (96, 1182, 185, 45),
            "flow": (637, 1182, 880, 45)
        },
        "M17N": {
            "name": (96, 1254, 185, 45),
            "flow": (637, 1254, 880, 45)
        },
        "M19": {
            "name": (96, 1326, 185, 45),
            "flow": (637, 1326, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1543, 185, 45),
            "flow": (637, 1543, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1470, 185, 45),
            "flow": (637, 1470, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1687, 185, 45),
            "flow": (637, 1687, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1398, 185, 45),
            "flow": (637, 1398, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1903, 185, 45),
            "flow": (637, 1903, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1975, 185, 45),
            "flow": (637, 1975, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1831, 185, 45),
            "flow": (637, 1831, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1759, 185, 45),
            "flow": (637, 1759, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_06(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 159, 185, 45),
            "flow": (637, 159, 880, 45)
        },
        "M2": {
            "name": (96, 225, 185, 45),
            "flow": (637, 225, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 291, 185, 45),
            "flow": (637, 291, 880, 45)
        },
        "M5": {
            "name": (96, 358, 185, 45),
            "flow": (637, 358, 880, 45)
        },
        "M6": {
            "name": (96, 424, 185, 45),
            "flow": (637, 424, 880, 45)
        },
        "M7": {
            "name": (96, 490, 185, 45),
            "flow": (637, 490, 880, 45)
        },
        "M8": {
            "name": (96, 556, 185, 45),
            "flow": (637, 556, 880, 45)
        },
        "M9": {
            "name": (96, 622, 185, 45),
            "flow": (637, 622, 880, 45)
        },
        "M10": {
            "name": (96, 689, 185, 45),
            "flow": (637, 689, 880, 45)
        },
        "M11": {
            "name": (96, 755, 185, 45),
            "flow": (637, 755, 880, 45)
        },
        "M13": {
            "name": (96, 821, 185, 45),
            "flow": (637, 821, 880, 45)
        },
        "M14": {
            "name": (96, 887, 185, 45),
            "flow": (637, 887, 880, 45)
        },
        "M15": {
            "name": (96, 953, 185, 45),
            "flow": (637, 953, 880, 45)
        },
        "M16": {
            "name": (96, 1020, 185, 45),
            "flow": (637, 1020, 880, 45)
        },
        "M17S": {
            "name": (96, 1086, 185, 45),
            "flow": (637, 1086, 880, 45)
        },
        "M17N": {
            "name": (96, 1152, 185, 45),
            "flow": (637, 1152, 880, 45)
        },
        "M19": {
            "name": (96, 1218, 185, 45),
            "flow": (637, 1218, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1417, 185, 45),
            "flow": (637, 1417, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1351, 185, 45),
            "flow": (637, 1351, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1483, 185, 45),
            "flow": (637, 1483, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1549, 185, 45),
            "flow": (637, 1549, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1284, 185, 45),
            "flow": (637, 1284, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1748, 185, 45),
            "flow": (637, 1748, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1814, 185, 45),
            "flow": (637, 1814, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1682, 185, 45),
            "flow": (637, 1682, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1615, 185, 45),
            "flow": (637, 1615, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_05(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (110, 216, 210, 45),
            "flow": (650, 216, 850, 45)
        },
        "M2": {
            "name": (110, 280, 210, 45),
            "flow": (650, 280, 850, 45)
        },
        "M4DAXING": {
            "name": (110, 343, 210, 45),
            "flow": (650, 343, 850, 45)
        },
        "M5": {
            "name": (110, 407, 210, 45),
            "flow": (650, 407, 850, 45)
        },
        "M6": {
            "name": (110, 471, 210, 45),
            "flow": (650, 471, 850, 45)
        },
        "M7": {
            "name": (110, 535, 210, 45),
            "flow": (650, 535, 850, 45)
        },
        "M8": {
            "name": (110, 598, 210, 45),
            "flow": (650, 598, 850, 45)
        },
        "M9": {
            "name": (110, 662, 210, 45),
            "flow": (650, 662, 850, 45)
        },
        "M10": {
            "name": (110, 726, 210, 45),
            "flow": (650, 726, 850, 45)
        },
        "M11": {
            "name": (110, 789, 210, 45),
            "flow": (650, 789, 850, 45)
        },
        "M13": {
            "name": (110, 853, 210, 45),
            "flow": (650, 853, 850, 45)
        },
        "M14": {
            "name": (110, 917, 210, 45),
            "flow": (650, 917, 850, 45)
        },
        "M15": {
            "name": (110, 981, 210, 45),
            "flow": (650, 981, 850, 45)
        },
        "M16": {
            "name": (110, 1044, 210, 45),
            "flow": (650, 1044, 850, 45)
        },
        "M17S": {
            "name": (110, 1108, 210, 45),
            "flow": (650, 1108, 850, 45)
        },
        "M17N": {
            "name": (110, 1172, 210, 45),
            "flow": (650, 1172, 850, 45)
        },
        "M19": {
            "name": (110, 1236, 210, 45),
            "flow": (650, 1236, 850, 45)
        },
        "M24_YIZHUANG": {
            "name": (110, 1427, 210, 45),
            "flow": (650, 1427, 850, 45)
        },
        "M25_FANGSHAN": {
            "name": (110, 1363, 210, 45),
            "flow": (650, 1363, 850, 45)
        },
        "YANFANG": {
            "name": (110, 1490, 210, 45),
            "flow": (650, 1490, 850, 45)
        },
        "M26_S1": {
            "name": (110, 1554, 210, 45),
            "flow": (650, 1554, 850, 45)
        },
        "M27_CHANGPING": {
            "name": (110, 1299, 210, 45),
            "flow": (650, 1299, 850, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (110, 1745, 210, 45),
            "flow": (650, 1745, 850, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (110, 1809, 210, 45),
            "flow": (650, 1809, 850, 45)
        },
        "XIJIAO": {
            "name": (110, 1682, 210, 45),
            "flow": (650, 1682, 850, 45)
        },
        "YIZHUANGT1": {
            "name": (110, 1618, 210, 45),
            "flow": (650, 1618, 850, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_02_2024_01_04(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (110, 235, 210, 45),
            "flow": (650, 235, 850, 45)
        },
        "M2": {
            "name": (110, 304, 210, 45),
            "flow": (650, 304, 850, 45)
        },
        "M4DAXING": {
            "name": (110, 374, 210, 45),
            "flow": (650, 374, 850, 45)
        },
        "M5": {
            "name": (110, 443, 210, 45),
            "flow": (650, 443, 850, 45)
        },
        "M6": {
            "name": (110, 512, 210, 45),
            "flow": (650, 512, 850, 45)
        },
        "M7": {
            "name": (110, 581, 210, 45),
            "flow": (650, 581, 850, 45)
        },
        "M8": {
            "name": (110, 650, 210, 45),
            "flow": (650, 650, 850, 45)
        },
        "M9": {
            "name": (110, 719, 210, 45),
            "flow": (650, 719, 850, 45)
        },
        "M10": {
            "name": (110, 789, 210, 45),
            "flow": (650, 789, 850, 45)
        },
        "M11": {
            "name": (110, 858, 210, 45),
            "flow": (650, 858, 850, 45)
        },
        "M13": {
            "name": (110, 927, 210, 45),
            "flow": (650, 927, 850, 45)
        },
        "M14": {
            "name": (110, 996, 210, 45),
            "flow": (650, 996, 850, 45)
        },
        "M15": {
            "name": (110, 1065, 210, 45),
            "flow": (650, 1065, 850, 45)
        },
        "M16": {
            "name": (110, 1135, 210, 45),
            "flow": (650, 1135, 850, 45)
        },
        "M17S": {
            "name": (110, 1204, 210, 45),
            "flow": (650, 1204, 850, 45)
        },
        "M17N": {
            "name": (110, 1273, 210, 45),
            "flow": (650, 1273, 850, 45)
        },
        "M19": {
            "name": (110, 1342, 210, 45),
            "flow": (650, 1342, 850, 45)
        },
        "M24_YIZHUANG": {
            "name": (110, 1550, 210, 45),
            "flow": (650, 1550, 850, 45)
        },
        "M25_FANGSHAN": {
            "name": (110, 1480, 210, 45),
            "flow": (650, 1480, 850, 45)
        },
        "YANFANG": {
            "name": (110, 1619, 210, 45),
            "flow": (650, 1619, 850, 45)
        },
        "M26_S1": {
            "name": (110, 1688, 210, 45),
            "flow": (650, 1688, 850, 45)
        },
        "M27_CHANGPING": {
            "name": (110, 1411, 210, 45),
            "flow": (650, 1411, 850, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (110, 1896, 210, 45),
            "flow": (650, 1896, 850, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (110, 1971, 210, 45),
            "flow": (650, 1971, 850, 45)
        },
        "XIJIAO": {
            "name": (110, 1827, 210, 45),
            "flow": (650, 1827, 850, 45)
        },
        "YIZHUANGT1": {
            "name": (110, 1757, 210, 45),
            "flow": (650, 1757, 850, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2024_01_01(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 239, 185, 45),
            "flow": (637, 239, 875, 45)
        },
        "M2": {
            "name": (96, 310, 185, 45),
            "flow": (637, 310, 875, 45)
        },
        "M4DAXING": {
            "name": (96, 381, 185, 45),
            "flow": (637, 381, 875, 45)
        },
        "M5": {
            "name": (96, 451, 185, 45),
            "flow": (637, 451, 875, 45)
        },
        "M6": {
            "name": (96, 522, 185, 45),
            "flow": (637, 522, 875, 45)
        },
        "M7": {
            "name": (96, 593, 185, 45),
            "flow": (637, 593, 875, 45)
        },
        "M8": {
            "name": (96, 664, 185, 45),
            "flow": (637, 664, 875, 45)
        },
        "M9": {
            "name": (96, 735, 185, 45),
            "flow": (637, 735, 875, 45)
        },
        "M10": {
            "name": (96, 805, 185, 45),
            "flow": (637, 805, 875, 45)
        },
        "M11": {
            "name": (96, 876, 185, 45),
            "flow": (637, 876, 875, 45)
        },
        "M13": {
            "name": (96, 947, 185, 45),
            "flow": (637, 947, 875, 45)
        },
        "M14": {
            "name": (96, 1018, 185, 45),
            "flow": (637, 1018, 875, 45)
        },
        "M15": {
            "name": (96, 1088, 185, 45),
            "flow": (637, 1088, 875, 45)
        },
        "M16": {
            "name": (96, 1159, 185, 45),
            "flow": (637, 1159, 875, 45)
        },
        "M17S": {
            "name": (96, 1230, 185, 45),
            "flow": (637, 1230, 875, 45)
        },
        "M19": {
            "name": (96, 1301, 185, 45),
            "flow": (637, 1301, 875, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1513, 185, 45),
            "flow": (637, 1513, 875, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1442, 185, 45),
            "flow": (637, 1442, 875, 45)
        },
        "YANFANG": {
            "name": (96, 1584, 185, 45),
            "flow": (637, 1584, 875, 45)
        },
        "M26_S1": {
            "name": (96, 1655, 185, 45),
            "flow": (637, 1655, 875, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1372, 185, 45),
            "flow": (637, 1372, 875, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1867, 185, 45),
            "flow": (637, 1867, 875, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1938, 185, 45),
            "flow": (637, 1938, 875, 45)
        },
        "XIJIAO": {
            "name": (96, 1796, 185, 45),
            "flow": (637, 1796, 875, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1726, 185, 45),
            "flow": (637, 1726, 875, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_12_30_2023_12_31(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 222, 185, 45),
            "flow": (637, 222, 880, 45)
        },
        "M2": {
            "name": (96, 288, 185, 45),
            "flow": (637, 288, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 354, 185, 45),
            "flow": (637, 354, 880, 45)
        },
        "M5": {
            "name": (96, 420, 185, 45),
            "flow": (637, 420, 880, 45)
        },
        "M6": {
            "name": (96, 486, 185, 45),
            "flow": (637, 486, 880, 45)
        },
        "M7": {
            "name": (96, 552, 185, 45),
            "flow": (637, 552, 880, 45)
        },
        "M8": {
            "name": (96, 618, 185, 45),
            "flow": (637, 618, 880, 45)
        },
        "M9": {
            "name": (96, 684, 185, 45),
            "flow": (637, 684, 880, 45)
        },
        "M10": {
            "name": (96, 750, 185, 45),
            "flow": (637, 750, 880, 45)
        },
        "M11": {
            "name": (96, 816, 185, 45),
            "flow": (637, 816, 880, 45)
        },
        "M13": {
            "name": (96, 882, 185, 45),
            "flow": (637, 882, 880, 45)
        },
        "M14": {
            "name": (96, 948, 185, 45),
            "flow": (637, 948, 880, 45)
        },
        "M15": {
            "name": (96, 1014, 185, 45),
            "flow": (637, 1014, 880, 45)
        },
        "M16": {
            "name": (96, 1080, 185, 45),
            "flow": (637, 1080, 880, 45)
        },
        "M17S": {
            "name": (96, 1146, 185, 45),
            "flow": (637, 1146, 880, 45)
        },
        "M19": {
            "name": (96, 1212, 185, 45),
            "flow": (637, 1212, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1410, 185, 45),
            "flow": (637, 1410, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1344, 185, 45),
            "flow": (637, 1344, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1476, 185, 45),
            "flow": (637, 1476, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1542, 185, 45),
            "flow": (637, 1542, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1278, 185, 45),
            "flow": (637, 1278, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1740, 185, 45),
            "flow": (637, 1740, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1807, 185, 45),
            "flow": (637, 1807, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1674, 185, 45),
            "flow": (637, 1674, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1608, 185, 45),
            "flow": (637, 1608, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_12_29(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (96, 222, 185, 45),
            "flow": (637, 222, 880, 45)
        },
        "M2": {
            "name": (96, 288, 185, 45),
            "flow": (637, 288, 880, 45)
        },
        "M4DAXING": {
            "name": (96, 353, 185, 45),
            "flow": (637, 353, 880, 45)
        },
        "M5": {
            "name": (96, 418, 185, 45),
            "flow": (637, 418, 880, 45)
        },
        "M6": {
            "name": (96, 484, 185, 45),
            "flow": (637, 484, 880, 45)
        },
        "M7": {
            "name": (96, 549, 185, 45),
            "flow": (637, 549, 880, 45)
        },
        "M8": {
            "name": (96, 615, 185, 45),
            "flow": (637, 615, 880, 45)
        },
        "M9": {
            "name": (96, 681, 185, 45),
            "flow": (637, 681, 880, 45)
        },
        "M10": {
            "name": (96, 746, 185, 45),
            "flow": (637, 746, 880, 45)
        },
        "M11": {
            "name": (96, 812, 185, 45),
            "flow": (637, 812, 880, 45)
        },
        "M13": {
            "name": (96, 877, 185, 45),
            "flow": (637, 877, 880, 45)
        },
        "M14": {
            "name": (96, 943, 185, 45),
            "flow": (637, 943, 880, 45)
        },
        "M15": {
            "name": (96, 1008, 185, 45),
            "flow": (637, 1008, 880, 45)
        },
        "M16": {
            "name": (96, 1074, 185, 45),
            "flow": (637, 1074, 880, 45)
        },
        "M17S": {
            "name": (96, 1139, 185, 45),
            "flow": (637, 1139, 880, 45)
        },
        "M19": {
            "name": (96, 1205, 185, 45),
            "flow": (637, 1205, 880, 45)
        },
        "M24_YIZHUANG": {
            "name": (96, 1401, 185, 45),
            "flow": (637, 1401, 880, 45)
        },
        "M25_FANGSHAN": {
            "name": (96, 1336, 185, 45),
            "flow": (637, 1336, 880, 45)
        },
        "YANFANG": {
            "name": (96, 1467, 185, 45),
            "flow": (637, 1467, 880, 45)
        },
        "M26_S1": {
            "name": (96, 1532, 185, 45),
            "flow": (637, 1532, 880, 45)
        },
        "M27_CHANGPING": {
            "name": (96, 1270, 185, 45),
            "flow": (637, 1270, 880, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (96, 1729, 185, 45),
            "flow": (637, 1729, 880, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (96, 1799, 185, 45),
            "flow": (637, 1799, 880, 45)
        },
        "XIJIAO": {
            "name": (96, 1663, 185, 45),
            "flow": (637, 1663, 880, 45)
        },
        "YIZHUANGT1": {
            "name": (96, 1598, 185, 45),
            "flow": (637, 1598, 880, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_12_24_2023_12_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (90, 222, 175, 45),
            "flow": (630, 222, 893, 45)
        },
        "M2": {
            "name": (90, 288, 175, 45),
            "flow": (630, 288, 893, 45)
        },
        "M4DAXING": {
            "name": (90, 354, 175, 45),
            "flow": (630, 354, 893, 45)
        },
        "M5": {
            "name": (90, 420, 175, 45),
            "flow": (630, 420, 893, 45)
        },
        "M6": {
            "name": (90, 487, 175, 45),
            "flow": (630, 487, 893, 45)
        },
        "M7": {
            "name": (90, 553, 175, 45),
            "flow": (630, 553, 893, 45)
        },
        "M8": {
            "name": (90, 619, 175, 45),
            "flow": (630, 619, 893, 45)
        },
        "M9": {
            "name": (90, 685, 175, 45),
            "flow": (630, 685, 893, 45)
        },
        "M10": {
            "name": (90, 751, 175, 45),
            "flow": (630, 751, 893, 45)
        },
        "M11": {
            "name": (90, 817, 175, 45),
            "flow": (630, 817, 893, 45)
        },
        "M13": {
            "name": (90, 883, 175, 45),
            "flow": (630, 883, 893, 45)
        },
        "M14": {
            "name": (90, 949, 175, 45),
            "flow": (630, 949, 893, 45)
        },
        "M15": {
            "name": (90, 1016, 175, 45),
            "flow": (630, 1016, 893, 45)
        },
        "M16": {
            "name": (90, 1082, 175, 45),
            "flow": (630, 1082, 893, 45)
        },
        "M17S": {
            "name": (90, 1148, 175, 45),
            "flow": (630, 1148, 893, 45)
        },
        "M19": {
            "name": (90, 1214, 175, 45),
            "flow": (630, 1214, 893, 45)
        },
        "M24_YIZHUANG": {
            "name": (90, 1412, 175, 45),
            "flow": (630, 1412, 893, 45)
        },
        "M25_FANGSHAN": {
            "name": (90, 1346, 175, 45),
            "flow": (630, 1346, 893, 45)
        },
        "YANFANG": {
            "name": (90, 1479, 175, 45),
            "flow": (630, 1479, 893, 45)
        },
        "M26_S1": {
            "name": (90, 1545, 175, 45),
            "flow": (630, 1545, 893, 45)
        },
        "M27_CHANGPING": {
            "name": (90, 1280, 175, 45),
            "flow": (630, 1280, 893, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (90, 1743, 175, 45),
            "flow": (630, 1743, 893, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (90, 1817, 175, 45),
            "flow": (630, 1817, 893, 45)
        },
        "XIJIAO": {
            "name": (90, 1677, 175, 45),
            "flow": (630, 1677, 893, 45)
        },
        "YIZHUANGT1": {
            "name": (90, 1611, 175, 45),
            "flow": (630, 1611, 893, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_12_22_2023_12_23(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (90, 206, 175, 45),
            "flow": (630, 206, 893, 45)
        },
        "M2": {
            "name": (90, 268, 175, 45),
            "flow": (630, 268, 893, 45)
        },
        "M4DAXING": {
            "name": (90, 330, 175, 45),
            "flow": (630, 330, 893, 45)
        },
        "M5": {
            "name": (90, 392, 175, 45),
            "flow": (630, 392, 893, 45)
        },
        "M6": {
            "name": (90, 454, 175, 45),
            "flow": (630, 454, 893, 45)
        },
        "M7": {
            "name": (90, 515, 175, 45),
            "flow": (630, 515, 893, 45)
        },
        "M8": {
            "name": (90, 577, 175, 45),
            "flow": (630, 577, 893, 45)
        },
        "M9": {
            "name": (90, 639, 175, 45),
            "flow": (630, 639, 893, 45)
        },
        "M10": {
            "name": (90, 701, 175, 45),
            "flow": (630, 701, 893, 45)
        },
        "M11": {
            "name": (90, 763, 175, 45),
            "flow": (630, 763, 893, 45)
        },
        "M13": {
            "name": (90, 824, 175, 45),
            "flow": (630, 824, 893, 45)
        },
        "M14": {
            "name": (90, 886, 175, 45),
            "flow": (630, 886, 893, 45)
        },
        "M15": {
            "name": (90, 948, 175, 45),
            "flow": (630, 948, 893, 45)
        },
        "M16": {
            "name": (90, 1010, 175, 45),
            "flow": (630, 1010, 893, 45)
        },
        "M17S": {
            "name": (90, 1072, 175, 45),
            "flow": (630, 1072, 893, 45)
        },
        "M19": {
            "name": (90, 1133, 175, 45),
            "flow": (630, 1133, 893, 45)
        },
        "M24_YIZHUANG": {
            "name": (90, 1319, 175, 45),
            "flow": (630, 1319, 893, 45)
        },
        "M25_FANGSHAN": {
            "name": (90, 1257, 175, 45),
            "flow": (630, 1257, 893, 45)
        },
        "YANFANG": {
            "name": (90, 1381, 175, 45),
            "flow": (630, 1381, 893, 45)
        },
        "M26_S1": {
            "name": (90, 1442, 175, 45),
            "flow": (630, 1442, 893, 45)
        },
        "M27_CHANGPING": {
            "name": (90, 1195, 175, 45),
            "flow": (630, 1195, 893, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (90, 1628, 175, 45),
            "flow": (630, 1628, 893, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (90, 1688, 175, 45),
            "flow": (630, 1688, 893, 45)
        },
        "XIJIAO": {
            "name": (90, 1566, 175, 45),
            "flow": (630, 1566, 893, 45)
        },
        "YIZHUANGT1": {
            "name": (90, 1504, 175, 45),
            "flow": (630, 1504, 893, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_12_19_2023_12_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (90, 222, 175, 45),
            "flow": (630, 222, 893, 45)
        },
        "M2": {
            "name": (90, 288, 175, 45),
            "flow": (630, 288, 893, 45)
        },
        "M4DAXING": {
            "name": (90, 354, 175, 45),
            "flow": (630, 354, 893, 45)
        },
        "M5": {
            "name": (90, 420, 175, 45),
            "flow": (630, 420, 893, 45)
        },
        "M6": {
            "name": (90, 487, 175, 45),
            "flow": (630, 487, 893, 45)
        },
        "M7": {
            "name": (90, 553, 175, 45),
            "flow": (630, 553, 893, 45)
        },
        "M8": {
            "name": (90, 619, 175, 45),
            "flow": (630, 619, 893, 45)
        },
        "M9": {
            "name": (90, 685, 175, 45),
            "flow": (630, 685, 893, 45)
        },
        "M10": {
            "name": (90, 751, 175, 45),
            "flow": (630, 751, 893, 45)
        },
        "M11": {
            "name": (90, 817, 175, 45),
            "flow": (630, 817, 893, 45)
        },
        "M13": {
            "name": (90, 883, 175, 45),
            "flow": (630, 883, 893, 45)
        },
        "M14": {
            "name": (90, 949, 175, 45),
            "flow": (630, 949, 893, 45)
        },
        "M15": {
            "name": (90, 1016, 175, 45),
            "flow": (630, 1016, 893, 45)
        },
        "M16": {
            "name": (90, 1082, 175, 45),
            "flow": (630, 1082, 893, 45)
        },
        "M17S": {
            "name": (90, 1148, 175, 45),
            "flow": (630, 1148, 893, 45)
        },
        "M19": {
            "name": (90, 1214, 175, 45),
            "flow": (630, 1214, 893, 45)
        },
        "M24_YIZHUANG": {
            "name": (90, 1412, 175, 45),
            "flow": (630, 1412, 893, 45)
        },
        "M25_FANGSHAN": {
            "name": (90, 1346, 175, 45),
            "flow": (630, 1346, 893, 45)
        },
        "YANFANG": {
            "name": (90, 1479, 175, 45),
            "flow": (630, 1479, 893, 45)
        },
        "M26_S1": {
            "name": (90, 1545, 175, 45),
            "flow": (630, 1545, 893, 45)
        },
        "M27_CHANGPING": {
            "name": (90, 1280, 175, 45),
            "flow": (630, 1280, 893, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (90, 1743, 175, 45),
            "flow": (630, 1743, 893, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (90, 1817, 175, 45),
            "flow": (630, 1817, 893, 45)
        },
        "XIJIAO": {
            "name": (90, 1677, 175, 45),
            "flow": (630, 1677, 893, 45)
        },
        "YIZHUANGT1": {
            "name": (90, 1611, 175, 45),
            "flow": (630, 1611, 893, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_12_18(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = {   
        "M1BATONG": {
            "name": (90, 222, 175, 45),
            "flow": (630, 222, 891, 45)
        },
        "M2": {
            "name": (90, 289, 175, 45),
            "flow": (630, 289, 891, 45)
        },
        "M4DAXING": {
            "name": (90, 355, 175, 45),
            "flow": (630, 355, 891, 45)
        },
        "M5": {
            "name": (90, 422, 175, 45),
            "flow": (630, 422, 891, 45)
        },
        "M6": {
            "name": (90, 489, 175, 45),
            "flow": (630, 489, 891, 45)
        },
        "M7": {
            "name": (90, 555, 175, 45),
            "flow": (630, 555, 891, 45)
        },
        "M8": {
            "name": (90, 622, 175, 45),
            "flow": (630, 622, 891, 45)
        },
        "M9": {
            "name": (90, 689, 175, 45),
            "flow": (630, 689, 891, 45)
        },
        "M10": {
            "name": (90, 755, 175, 45),
            "flow": (630, 755, 891, 45)
        },
        "M11": {
            "name": (90, 822, 175, 45),
            "flow": (630, 822, 891, 45)
        },
        "M13": {
            "name": (90, 889, 175, 45),
            "flow": (630, 889, 891, 45)
        },
        "M14": {
            "name": (90, 955, 175, 45),
            "flow": (630, 955, 891, 45)
        },
        "M15": {
            "name": (90, 1022, 175, 45),
            "flow": (630, 1022, 891, 45)
        },
        "M16": {
            "name": (90, 1089, 175, 45),
            "flow": (630, 1089, 891, 45)
        },
        "M17S": {
            "name": (90, 1155, 175, 45),
            "flow": (630, 1155, 891, 45)
        },
        "M19": {
            "name": (90, 1222, 175, 45),
            "flow": (630, 1222, 891, 45)
        },
        "M24_YIZHUANG": {
            "name": (90, 1422, 175, 45),
            "flow": (630, 1422, 891, 45)
        },
        "M25_FANGSHAN": {
            "name": (90, 1355, 175, 45),
            "flow": (630, 1355, 891, 45)
        },
        "YANFANG": {
            "name": (90, 1489, 175, 45),
            "flow": (630, 1489, 891, 45)
        },
        "M26_S1": {
            "name": (90, 1555, 175, 45),
            "flow": (630, 1555, 891, 45)
        },
        "M27_CHANGPING": {
            "name": (90, 1289, 175, 45),
            "flow": (630, 1289, 891, 45)
        },
        "M34_SHOUDUJICHANG": {
            "name": (90, 1755, 175, 45),
            "flow": (630, 1755, 891, 45)
        },
        "M35_DAXINGJICHANG": {
            "name": (90, 1818, 175, 45),
            "flow": (630, 1818, 891, 45)
        },
        "XIJIAO": {
            "name": (90, 1689, 175, 45),
            "flow": (630, 1689, 891, 45)
        },
        "YIZHUANGT1": {
            "name": (90, 1622, 175, 45),
            "flow": (630, 1622, 891, 45)
        }
    }

    # 裁剪图片
    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  110).convert("RGB")) # 二值化
    
    # OCR
    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    final_date = "NOVALUE"
    final_flow = "NOVALUE"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_11_15_2023_12_17(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        # globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_11_14(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 125).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        # globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_11_02_2023_11_13(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        # globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_11_01(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_28_2023_10_31(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 205).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)
            
            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_24_2023_10_26(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_22_2023_10_23(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_20_2023_10_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 190).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_17_2023_10_19(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (104, 671, 75, 18),
            "flow": (371, 671, 435, 18),
        },
        "M2": {
            "name": (104, 698, 75, 18),
            "flow": (371, 698, 435, 18),
        },
        "M4DAXING": {
            "name": (104, 725, 75, 18),
            "flow": (371, 725, 435, 18),
        },
        "M5": {
            "name": (104, 752, 75, 18),
            "flow": (371, 752, 435, 18),
        },
        "M6": {
            "name": (104, 779, 75, 18),
            "flow": (371, 779, 435, 18),
        },
        "M7": {
            "name": (104, 806, 75, 18),
            "flow": (371, 806, 435, 18),
        },
        "M8": {
            "name": (104, 833, 75, 18),
            "flow": (371, 833, 435, 18),
        },
        "M9": {
            "name": (104, 859, 75, 18),
            "flow": (371, 859, 435, 18),
        },
        "M10": {
            "name": (104, 886, 75, 18),
            "flow": (371, 886, 435, 18),
        },
        "M11": {
            "name": (104, 913, 75, 18),
            "flow": (371, 913, 435, 18),
        },
        "M13": {
            "name": (104, 940, 75, 18),
            "flow": (371, 940, 435, 18),
        },
        "M14": {
            "name": (104, 967, 75, 18),
            "flow": (371, 967, 435, 18),
        },
        "M15": {
            "name": (104, 994, 75, 18),
            "flow": (371, 994, 435, 18),
        },
        "M16": {
            "name": (104, 1021, 75, 18),
            "flow": (371, 1021, 435, 18),
        },
        "M17S": {
            "name": (104, 1048, 75, 18),
            "flow": (371, 1048, 435, 18),
        },
        "M19": {
            "name": (104, 1075, 75, 18),
            "flow": (371, 1075, 435, 18),
        },
        "M24_YIZHUANG": {
            "name": (104, 1156, 75, 18),
            "flow": (371, 1156, 435, 18),
        },
        "M25_FANGSHAN": {
            "name": (104, 1129, 75, 18),
            "flow": (371, 1129, 435, 18),
        },
        "YANFANG": {
            "name": (104, 1182, 75, 18),
            "flow": (371, 1182, 435, 18),
        },
        "M26_S1": {
            "name": (104, 1209, 75, 18),
            "flow": (371, 1209, 435, 18),
        },
        "M27_CHANGPING": {
            "name": (104, 1102, 75, 18),
            "flow": (371, 1102, 435, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (104, 1290, 75, 18),
            "flow": (371, 1290, 435, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (104, 1317, 75, 18),
            "flow": (371, 1317, 435, 18),
        },
        "XIJIAO": {
            "name": (104, 1263, 75, 18),
            "flow": (371, 1263, 435, 18),
        },
        "YIZHUANGT1": {
            "name": (104, 1236, 75, 18),
            "flow": (371, 1236, 435, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 190).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_13_2023_10_16(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (108, 671, 80, 18),
            "flow": (375, 671, 430, 18),
        },
        "M2": {
            "name": (108, 700, 80, 18),
            "flow": (375, 700, 430, 18),
        },
        "M4DAXING": {
            "name": (108, 729, 80, 18),
            "flow": (375, 729, 430, 18),
        },
        "M5": {
            "name": (108, 757, 80, 18),
            "flow": (375, 757, 430, 18),
        },
        "M6": {
            "name": (108, 786, 80, 18),
            "flow": (375, 786, 430, 18),
        },
        "M7": {
            "name": (108, 815, 80, 18),
            "flow": (375, 815, 430, 18),
        },
        "M8": {
            "name": (108, 844, 80, 18),
            "flow": (375, 844, 430, 18),
        },
        "M9": {
            "name": (108, 873, 80, 18),
            "flow": (375, 873, 430, 18),
        },
        "M10": {
            "name": (108, 901, 80, 18),
            "flow": (375, 901, 430, 18),
        },
        "M11": {
            "name": (108, 930, 80, 18),
            "flow": (375, 930, 430, 18),
        },
        "M13": {
            "name": (108, 959, 80, 18),
            "flow": (375, 959, 430, 18),
        },
        "M14": {
            "name": (108, 988, 80, 18),
            "flow": (375, 988, 430, 18),
        },
        "M15": {
            "name": (108, 1017, 80, 18),
            "flow": (375, 1017, 430, 18),
        },
        "M16": {
            "name": (108, 1045, 80, 18),
            "flow": (375, 1045, 430, 18),
        },
        "M17S": {
            "name": (108, 1074, 80, 18),
            "flow": (375, 1074, 430, 18),
        },
        "M19": {
            "name": (108, 1103, 80, 18),
            "flow": (375, 1103, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (108, 1189, 80, 18),
            "flow": (375, 1189, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (108, 1160, 80, 18),
            "flow": (375, 1160, 430, 18),
        },
        "YANFANG": {
            "name": (108, 1218, 80, 18),
            "flow": (375, 1218, 430, 18),
        },
        "M26_S1": {
            "name": (108, 1247, 80, 18),
            "flow": (375, 1247, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (108, 1132, 80, 18),
            "flow": (375, 1132, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (108, 1333, 80, 18),
            "flow": (375, 1333, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (108, 1362, 80, 18),
            "flow": (375, 1362, 430, 18),
        },
        "XIJIAO": {
            "name": (108, 1304, 80, 18),
            "flow": (375, 1304, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (108, 1276, 80, 18),
            "flow": (375, 1276, 430, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 200).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 667, 75, 18),
            "flow": (375, 667, 430, 18),
        },
        "M2": {
            "name": (106, 694, 75, 18),
            "flow": (375, 694, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 720, 75, 18),
            "flow": (375, 720, 430, 18),
        },
        "M5": {
            "name": (106, 747, 75, 18),
            "flow": (375, 747, 430, 18),
        },
        "M6": {
            "name": (106, 774, 75, 18),
            "flow": (375, 774, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 827, 75, 18),
            "flow": (375, 827, 430, 18),
        },
        "M9": {
            "name": (106, 854, 75, 18),
            "flow": (375, 854, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 907, 75, 18),
            "flow": (375, 907, 430, 18),
        },
        "M13": {
            "name": (106, 934, 75, 18),
            "flow": (375, 934, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1014, 75, 18),
            "flow": (375, 1014, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1174, 75, 18),
            "flow": (375, 1174, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1094, 75, 18),
            "flow": (375, 1094, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 667, 75, 18),
            "flow": (375, 667, 430, 18),
        },
        "M2": {
            "name": (106, 694, 75, 18),
            "flow": (375, 694, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 720, 75, 18),
            "flow": (375, 720, 430, 18),
        },
        "M5": {
            "name": (106, 747, 75, 18),
            "flow": (375, 747, 430, 18),
        },
        "M6": {
            "name": (106, 774, 75, 18),
            "flow": (375, 774, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 827, 75, 18),
            "flow": (375, 827, 430, 18),
        },
        "M9": {
            "name": (106, 854, 75, 18),
            "flow": (375, 854, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 907, 75, 18),
            "flow": (375, 907, 430, 18),
        },
        "M13": {
            "name": (106, 934, 75, 18),
            "flow": (375, 934, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1014, 75, 18),
            "flow": (375, 1014, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1174, 75, 18),
            "flow": (375, 1174, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1094, 75, 18),
            "flow": (375, 1094, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    # png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_10_01_2023_10_10(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 667, 75, 18),
            "flow": (375, 667, 430, 18),
        },
        "M2": {
            "name": (106, 694, 75, 18),
            "flow": (375, 694, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 720, 75, 18),
            "flow": (375, 720, 430, 18),
        },
        "M5": {
            "name": (106, 747, 75, 18),
            "flow": (375, 747, 430, 18),
        },
        "M6": {
            "name": (106, 774, 75, 18),
            "flow": (375, 774, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 827, 75, 18),
            "flow": (375, 827, 430, 18),
        },
        "M9": {
            "name": (106, 854, 75, 18),
            "flow": (375, 854, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 907, 75, 18),
            "flow": (375, 907, 430, 18),
        },
        "M13": {
            "name": (106, 934, 75, 18),
            "flow": (375, 934, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1014, 75, 18),
            "flow": (375, 1014, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1174, 75, 18),
            "flow": (375, 1174, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1094, 75, 18),
            "flow": (375, 1094, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 203, 525, 193, 25)
    png_flow = img_cut_center(png, 275, 558, 345, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    # png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack


def ocr_2023_09_19_2023_09_30(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 667, 75, 18),
            "flow": (375, 667, 430, 18),
        },
        "M2": {
            "name": (106, 694, 75, 18),
            "flow": (375, 694, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 720, 75, 18),
            "flow": (375, 720, 430, 18),
        },
        "M5": {
            "name": (106, 747, 75, 18),
            "flow": (375, 747, 430, 18),
        },
        "M6": {
            "name": (106, 774, 75, 18),
            "flow": (375, 774, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 827, 75, 18),
            "flow": (375, 827, 430, 18),
        },
        "M9": {
            "name": (106, 854, 75, 18),
            "flow": (375, 854, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 907, 75, 18),
            "flow": (375, 907, 430, 18),
        },
        "M13": {
            "name": (106, 934, 75, 18),
            "flow": (375, 934, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1014, 75, 18),
            "flow": (375, 1014, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1174, 75, 18),
            "flow": (375, 1174, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1094, 75, 18),
            "flow": (375, 1094, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_09_18(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 667, 75, 18),
            "flow": (375, 667, 430, 18),
        },
        "M2": {
            "name": (106, 694, 75, 18),
            "flow": (375, 694, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 720, 75, 18),
            "flow": (375, 720, 430, 18),
        },
        "M5": {
            "name": (106, 747, 75, 18),
            "flow": (375, 747, 430, 18),
        },
        "M6": {
            "name": (106, 774, 75, 18),
            "flow": (375, 774, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 827, 75, 18),
            "flow": (375, 827, 430, 18),
        },
        "M9": {
            "name": (106, 854, 75, 18),
            "flow": (375, 854, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 907, 75, 18),
            "flow": (375, 907, 430, 18),
        },
        "M13": {
            "name": (106, 934, 75, 18),
            "flow": (375, 934, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1014, 75, 18),
            "flow": (375, 1014, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1174, 75, 18),
            "flow": (375, 1174, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1094, 75, 18),
            "flow": (375, 1094, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_09_15_2023_09_17(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 667, 75, 18),
            "flow": (375, 667, 430, 18),
        },
        "M2": {
            "name": (106, 694, 75, 18),
            "flow": (375, 694, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 720, 75, 18),
            "flow": (375, 720, 430, 18),
        },
        "M5": {
            "name": (106, 747, 75, 18),
            "flow": (375, 747, 430, 18),
        },
        "M6": {
            "name": (106, 774, 75, 18),
            "flow": (375, 774, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 827, 75, 18),
            "flow": (375, 827, 430, 18),
        },
        "M9": {
            "name": (106, 854, 75, 18),
            "flow": (375, 854, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 907, 75, 18),
            "flow": (375, 907, 430, 18),
        },
        "M13": {
            "name": (106, 934, 75, 18),
            "flow": (375, 934, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1014, 75, 18),
            "flow": (375, 1014, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1174, 75, 18),
            "flow": (375, 1174, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1094, 75, 18),
            "flow": (375, 1094, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }
    
    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_09_12_2023_09_14(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_09_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 75).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        # globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 190).convert("RGB")) # 二值化
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_28_2023_09_10(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 75).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_26(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 75).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_22_2023_08_25(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 75).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 75).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_14_2023_08_20(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (106, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 719, 75, 18),
            "flow": (375, 719, 430, 18),
        },
        "M5": {
            "name": (106, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (106, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (106, 799, 75, 18),
            "flow": (375, 799, 430, 18),
        },
        "M8": {
            "name": (106, 826, 75, 18),
            "flow": (375, 826, 430, 18),
        },
        "M9": {
            "name": (106, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (106, 879, 75, 18),
            "flow": (375, 879, 430, 18),
        },
        "M11": {
            "name": (106, 906, 75, 18),
            "flow": (375, 906, 430, 18),
        },
        "M13": {
            "name": (106, 933, 75, 18),
            "flow": (375, 933, 430, 18),
        },
        "M14": {
            "name": (106, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (106, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (106, 1013, 75, 18),
            "flow": (375, 1013, 430, 18),
        },
        "M17S": {
            "name": (106, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (106, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1199, 75, 18),
            "flow": (375, 1199, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1279, 75, 18),
            "flow": (375, 1279, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1306, 75, 18),
            "flow": (375, 1306, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1226, 75, 18),
            "flow": (375, 1226, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 75).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_13(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 697, 75, 18),
            "flow": (375, 697, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 725, 75, 18),
            "flow": (375, 725, 430, 18),
        },
        "M5": {
            "name": (106, 754, 75, 18),
            "flow": (375, 754, 430, 18),
        },
        "M6": {
            "name": (106, 782, 75, 18),
            "flow": (375, 782, 430, 18),
        },
        "M7": {
            "name": (106, 811, 75, 18),
            "flow": (375, 811, 430, 18),
        },
        "M8": {
            "name": (106, 840, 75, 18),
            "flow": (375, 840, 430, 18),
        },
        "M9": {
            "name": (106, 868, 75, 18),
            "flow": (375, 868, 430, 18),
        },
        "M10": {
            "name": (106, 897, 75, 18),
            "flow": (375, 897, 430, 18),
        },
        "M11": {
            "name": (106, 925, 75, 18),
            "flow": (375, 925, 430, 18),
        },
        "M13": {
            "name": (106, 954, 75, 18),
            "flow": (375, 954, 430, 18),
        },
        "M14": {
            "name": (106, 982, 75, 18),
            "flow": (375, 982, 430, 18),
        },
        "M15": {
            "name": (106, 1011, 75, 18),
            "flow": (375, 1011, 430, 18),
        },
        "M16": {
            "name": (106, 1040, 75, 18),
            "flow": (375, 1040, 430, 18),
        },
        "M17S": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M19": {
            "name": (106, 1097, 75, 18),
            "flow": (375, 1097, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1183, 75, 18),
            "flow": (375, 1183, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1154, 75, 18),
            "flow": (375, 1154, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1211, 75, 18),
            "flow": (375, 1211, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1240, 75, 18),
            "flow": (375, 1240, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1125, 75, 18),
            "flow": (375, 1125, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1325, 75, 18),
            "flow": (375, 1325, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1354, 75, 18),
            "flow": (375, 1354, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1297, 75, 18),
            "flow": (375, 1297, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1268, 75, 18),
            "flow": (375, 1268, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_10_2023_08_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 695, 75, 18),
            "flow": (375, 695, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 721, 75, 18),
            "flow": (375, 721, 430, 18),
        },
        "M5": {
            "name": (106, 748, 75, 18),
            "flow": (375, 748, 430, 18),
        },
        "M6": {
            "name": (106, 775, 75, 18),
            "flow": (375, 775, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 828, 75, 18),
            "flow": (375, 828, 430, 18),
        },
        "M9": {
            "name": (106, 855, 75, 18),
            "flow": (375, 855, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 908, 75, 18),
            "flow": (375, 908, 430, 18),
        },
        "M13": {
            "name": (106, 935, 75, 18),
            "flow": (375, 935, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1015, 75, 18),
            "flow": (375, 1015, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1175, 75, 18),
            "flow": (375, 1175, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1095, 75, 18),
            "flow": (375, 1095, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(img_binarize(png_flow, False, 100).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_09(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 695, 75, 18),
            "flow": (375, 695, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 721, 75, 18),
            "flow": (375, 721, 430, 18),
        },
        "M5": {
            "name": (106, 748, 75, 18),
            "flow": (375, 748, 430, 18),
        },
        "M6": {
            "name": (106, 775, 75, 18),
            "flow": (375, 775, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 828, 75, 18),
            "flow": (375, 828, 430, 18),
        },
        "M9": {
            "name": (106, 855, 75, 18),
            "flow": (375, 855, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 908, 75, 18),
            "flow": (375, 908, 430, 18),
        },
        "M13": {
            "name": (106, 935, 75, 18),
            "flow": (375, 935, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1015, 75, 18),
            "flow": (375, 1015, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1175, 75, 18),
            "flow": (375, 1175, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1095, 75, 18),
            "flow": (375, 1095, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_06_2023_08_08(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 695, 75, 18),
            "flow": (375, 695, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 721, 75, 18),
            "flow": (375, 721, 430, 18),
        },
        "M5": {
            "name": (106, 748, 75, 18),
            "flow": (375, 748, 430, 18),
        },
        "M6": {
            "name": (106, 775, 75, 18),
            "flow": (375, 775, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 828, 75, 18),
            "flow": (375, 828, 430, 18),
        },
        "M9": {
            "name": (106, 855, 75, 18),
            "flow": (375, 855, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 908, 75, 18),
            "flow": (375, 908, 430, 18),
        },
        "M13": {
            "name": (106, 935, 75, 18),
            "flow": (375, 935, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1015, 75, 18),
            "flow": (375, 1015, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1175, 75, 18),
            "flow": (375, 1175, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1095, 75, 18),
            "flow": (375, 1095, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_08_05(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 695, 75, 18),
            "flow": (375, 695, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 721, 75, 18),
            "flow": (375, 721, 430, 18),
        },
        "M5": {
            "name": (106, 748, 75, 18),
            "flow": (375, 748, 430, 18),
        },
        "M6": {
            "name": (106, 775, 75, 18),
            "flow": (375, 775, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 828, 75, 18),
            "flow": (375, 828, 430, 18),
        },
        "M9": {
            "name": (106, 855, 75, 18),
            "flow": (375, 855, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 908, 75, 18),
            "flow": (375, 908, 430, 18),
        },
        "M13": {
            "name": (106, 935, 75, 18),
            "flow": (375, 935, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1015, 75, 18),
            "flow": (375, 1015, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1175, 75, 18),
            "flow": (375, 1175, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1095, 75, 18),
            "flow": (375, 1095, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_29_2023_08_04(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 695, 75, 18),
            "flow": (375, 695, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 721, 75, 18),
            "flow": (375, 721, 430, 18),
        },
        "M5": {
            "name": (106, 748, 75, 18),
            "flow": (375, 748, 430, 18),
        },
        "M6": {
            "name": (106, 775, 75, 18),
            "flow": (375, 775, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 828, 75, 18),
            "flow": (375, 828, 430, 18),
        },
        "M9": {
            "name": (106, 855, 75, 18),
            "flow": (375, 855, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 908, 75, 18),
            "flow": (375, 908, 430, 18),
        },
        "M13": {
            "name": (106, 935, 75, 18),
            "flow": (375, 935, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1015, 75, 18),
            "flow": (375, 1015, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1175, 75, 18),
            "flow": (375, 1175, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1095, 75, 18),
            "flow": (375, 1095, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 695, 75, 18),
            "flow": (375, 695, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 721, 75, 18),
            "flow": (375, 721, 430, 18),
        },
        "M5": {
            "name": (106, 748, 75, 18),
            "flow": (375, 748, 430, 18),
        },
        "M6": {
            "name": (106, 775, 75, 18),
            "flow": (375, 775, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 828, 75, 18),
            "flow": (375, 828, 430, 18),
        },
        "M9": {
            "name": (106, 855, 75, 18),
            "flow": (375, 855, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 908, 75, 18),
            "flow": (375, 908, 430, 18),
        },
        "M13": {
            "name": (106, 935, 75, 18),
            "flow": (375, 935, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1015, 75, 18),
            "flow": (375, 1015, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1175, 75, 18),
            "flow": (375, 1175, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1095, 75, 18),
            "flow": (375, 1095, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 185).convert("RGB")) # 二值化
        # globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_26_2023_07_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (106, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (106, 695, 75, 18),
            "flow": (375, 695, 430, 18),
        },
        "M4DAXING": {
            "name": (106, 721, 75, 18),
            "flow": (375, 721, 430, 18),
        },
        "M5": {
            "name": (106, 748, 75, 18),
            "flow": (375, 748, 430, 18),
        },
        "M6": {
            "name": (106, 775, 75, 18),
            "flow": (375, 775, 430, 18),
        },
        "M7": {
            "name": (106, 801, 75, 18),
            "flow": (375, 801, 430, 18),
        },
        "M8": {
            "name": (106, 828, 75, 18),
            "flow": (375, 828, 430, 18),
        },
        "M9": {
            "name": (106, 855, 75, 18),
            "flow": (375, 855, 430, 18),
        },
        "M10": {
            "name": (106, 881, 75, 18),
            "flow": (375, 881, 430, 18),
        },
        "M11": {
            "name": (106, 908, 75, 18),
            "flow": (375, 908, 430, 18),
        },
        "M13": {
            "name": (106, 935, 75, 18),
            "flow": (375, 935, 430, 18),
        },
        "M14": {
            "name": (106, 961, 75, 18),
            "flow": (375, 961, 430, 18),
        },
        "M15": {
            "name": (106, 988, 75, 18),
            "flow": (375, 988, 430, 18),
        },
        "M16": {
            "name": (106, 1015, 75, 18),
            "flow": (375, 1015, 430, 18),
        },
        "M17S": {
            "name": (106, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (106, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (106, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (106, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (106, 1175, 75, 18),
            "flow": (375, 1175, 430, 18),
        },
        "M26_S1": {
            "name": (106, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (106, 1095, 75, 18),
            "flow": (375, 1095, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (106, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (106, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (106, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (106, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack


def ocr_2023_07_25(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (107, 666, 75, 18),
            "flow": (375, 666, 430, 18),
        },
        "M2": {
            "name": (107, 693, 75, 18),
            "flow": (375, 693, 430, 18),
        },
        "M4DAXING": {
            "name": (107, 720, 75, 18),
            "flow": (375, 720, 430, 18),
        },
        "M5": {
            "name": (107, 746, 75, 18),
            "flow": (375, 746, 430, 18),
        },
        "M6": {
            "name": (107, 773, 75, 18),
            "flow": (375, 773, 430, 18),
        },
        "M7": {
            "name": (107, 800, 75, 18),
            "flow": (375, 800, 430, 18),
        },
        "M8": {
            "name": (107, 827, 75, 18),
            "flow": (375, 827, 430, 18),
        },
        "M9": {
            "name": (107, 853, 75, 18),
            "flow": (375, 853, 430, 18),
        },
        "M10": {
            "name": (107, 880, 75, 18),
            "flow": (375, 880, 430, 18),
        },
        "M11": {
            "name": (107, 907, 75, 18),
            "flow": (375, 907, 430, 18),
        },
        "M13": {
            "name": (107, 934, 75, 18),
            "flow": (375, 934, 430, 18),
        },
        "M14": {
            "name": (107, 960, 75, 18),
            "flow": (375, 960, 430, 18),
        },
        "M15": {
            "name": (107, 987, 75, 18),
            "flow": (375, 987, 430, 18),
        },
        "M16": {
            "name": (107, 1014, 75, 18),
            "flow": (375, 1014, 430, 18),
        },
        "M17S": {
            "name": (107, 1041, 75, 18),
            "flow": (375, 1041, 430, 18),
        },
        "M19": {
            "name": (107, 1067, 75, 18),
            "flow": (375, 1067, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (107, 1148, 75, 18),
            "flow": (375, 1148, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (107, 1121, 75, 18),
            "flow": (375, 1121, 430, 18),
        },
        "YANFANG": {
            "name": (107, 1174, 75, 18),
            "flow": (375, 1174, 430, 18),
        },
        "M26_S1": {
            "name": (107, 1201, 75, 18),
            "flow": (375, 1201, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (107, 1094, 75, 18),
            "flow": (375, 1094, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (107, 1281, 75, 18),
            "flow": (375, 1281, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (107, 1308, 75, 18),
            "flow": (375, 1308, 430, 18),
        },
        "XIJIAO": {
            "name": (107, 1255, 75, 18),
            "flow": (375, 1255, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (107, 1228, 75, 18),
            "flow": (375, 1228, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 200).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_23_2023_07_24(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 668, 75, 18),
            "flow": (375, 668, 430, 18),
        },
        "M2": {
            "name": (111, 697, 75, 18),
            "flow": (375, 697, 430, 18),
        },
        "M4DAXING": {
            "name": (111, 725, 75, 18),
            "flow": (375, 725, 430, 18),
        },
        "M5": {
            "name": (111, 754, 75, 18),
            "flow": (375, 754, 430, 18),
        },
        "M6": {
            "name": (111, 782, 75, 18),
            "flow": (375, 782, 430, 18),
        },
        "M7": {
            "name": (111, 811, 75, 18),
            "flow": (375, 811, 430, 18),
        },
        "M8": {
            "name": (111, 840, 75, 18),
            "flow": (375, 840, 430, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (375, 868, 430, 18),
        },
        "M10": {
            "name": (111, 897, 75, 18),
            "flow": (375, 897, 430, 18),
        },
        "M11": {
            "name": (111, 925, 75, 18),
            "flow": (375, 925, 430, 18),
        },
        "M13": {
            "name": (111, 954, 75, 18),
            "flow": (375, 954, 430, 18),
        },
        "M14": {
            "name": (111, 982, 75, 18),
            "flow": (375, 982, 430, 18),
        },
        "M15": {
            "name": (111, 1011, 75, 18),
            "flow": (375, 1011, 430, 18),
        },
        "M16": {
            "name": (111, 1040, 75, 18),
            "flow": (375, 1040, 430, 18),
        },
        "M17S": {
            "name": (111, 1068, 75, 18),
            "flow": (375, 1068, 430, 18),
        },
        "M19": {
            "name": (111, 1097, 75, 18),
            "flow": (375, 1097, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1183, 75, 18),
            "flow": (375, 1183, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1154, 75, 18),
            "flow": (375, 1154, 430, 18),
        },
        "YANFANG": {
            "name": (111, 1211, 75, 18),
            "flow": (375, 1211, 430, 18),
        },
        "M26_S1": {
            "name": (111, 1240, 75, 18),
            "flow": (375, 1240, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1125, 75, 18),
            "flow": (375, 1125, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1325, 75, 18),
            "flow": (375, 1325, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1354, 75, 18),
            "flow": (375, 1354, 430, 18),
        },
        "XIJIAO": {
            "name": (111, 1297, 75, 18),
            "flow": (375, 1297, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1268, 75, 18),
            "flow": (375, 1268, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 200).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_22(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (107, 678, 75, 18),
            "flow": (375, 678, 430, 18),
        },
        "M2": {
            "name": (107, 705, 75, 18),
            "flow": (375, 705, 430, 18),
        },
        "M4DAXING": {
            "name": (107, 731, 75, 18),
            "flow": (375, 731, 430, 18),
        },
        "M5": {
            "name": (107, 758, 75, 18),
            "flow": (375, 758, 430, 18),
        },
        "M6": {
            "name": (107, 785, 75, 18),
            "flow": (375, 785, 430, 18),
        },
        "M7": {
            "name": (107, 812, 75, 18),
            "flow": (375, 812, 430, 18),
        },
        "M8": {
            "name": (107, 838, 75, 18),
            "flow": (375, 838, 430, 18),
        },
        "M9": {
            "name": (107, 865, 75, 18),
            "flow": (375, 865, 430, 18),
        },
        "M10": {
            "name": (107, 892, 75, 18),
            "flow": (375, 892, 430, 18),
        },
        "M11": {
            "name": (107, 918, 75, 18),
            "flow": (375, 918, 430, 18),
        },
        "M13": {
            "name": (107, 945, 75, 18),
            "flow": (375, 945, 430, 18),
        },
        "M14": {
            "name": (107, 972, 75, 18),
            "flow": (375, 972, 430, 18),
        },
        "M15": {
            "name": (107, 999, 75, 18),
            "flow": (375, 999, 430, 18),
        },
        "M16": {
            "name": (107, 1025, 75, 18),
            "flow": (375, 1025, 430, 18),
        },
        "M17S": {
            "name": (107, 1052, 75, 18),
            "flow": (375, 1052, 430, 18),
        },
        "M19": {
            "name": (107, 1079, 75, 18),
            "flow": (375, 1079, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (107, 1159, 75, 18),
            "flow": (375, 1159, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (107, 1132, 75, 18),
            "flow": (375, 1132, 430, 18),
        },
        "YANFANG": {
            "name": (107, 1185, 75, 18),
            "flow": (375, 1185, 430, 18),
        },
        "M26_S1": {
            "name": (107, 1212, 75, 18),
            "flow": (375, 1212, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (107, 1105, 75, 18),
            "flow": (375, 1105, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (107, 1292, 75, 18),
            "flow": (375, 1292, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (107, 1319, 75, 18),
            "flow": (375, 1319, 430, 18),
        },
        "XIJIAO": {
            "name": (107, 1266, 75, 18),
            "flow": (375, 1266, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (107, 1239, 75, 18),
            "flow": (375, 1239, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 200).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_09_2023_07_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 664, 75, 18),
            "flow": (375, 664, 430, 18),
        },
        "M2": {
            "name": (111, 691, 75, 18),
            "flow": (375, 691, 430, 18),
        },
        "M4DAXING": {
            "name": (111, 718, 75, 18),
            "flow": (375, 718, 430, 18),
        },
        "M5": {
            "name": (111, 744, 75, 18),
            "flow": (375, 744, 430, 18),
        },
        "M6": {
            "name": (111, 771, 75, 18),
            "flow": (375, 771, 430, 18),
        },
        "M7": {
            "name": (111, 798, 75, 18),
            "flow": (375, 798, 430, 18),
        },
        "M8": {
            "name": (111, 825, 75, 18),
            "flow": (375, 825, 430, 18),
        },
        "M9": {
            "name": (111, 852, 75, 18),
            "flow": (375, 852, 430, 18),
        },
        "M10": {
            "name": (111, 878, 75, 18),
            "flow": (375, 878, 430, 18),
        },
        "M11": {
            "name": (111, 905, 75, 18),
            "flow": (375, 905, 430, 18),
        },
        "M13": {
            "name": (111, 932, 75, 18),
            "flow": (375, 932, 430, 18),
        },
        "M14": {
            "name": (111, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (111, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (111, 1012, 75, 18),
            "flow": (375, 1012, 430, 18),
        },
        "M17S": {
            "name": (111, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (111, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (111, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (111, 1200, 75, 18),
            "flow": (375, 1200, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1280, 75, 18),
            "flow": (375, 1280, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1307, 75, 18),
            "flow": (375, 1307, 430, 18),
        },
        "XIJIAO": {
            "name": (111, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1227, 75, 18),
            "flow": (375, 1227, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_07_2023_07_08(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 664, 75, 18),
            "flow": (375, 664, 430, 18),
        },
        "M2": {
            "name": (111, 691, 75, 18),
            "flow": (375, 691, 430, 18),
        },
        "M4DAXING": {
            "name": (111, 718, 75, 18),
            "flow": (375, 718, 430, 18),
        },
        "M5": {
            "name": (111, 744, 75, 18),
            "flow": (375, 744, 430, 18),
        },
        "M6": {
            "name": (111, 771, 75, 18),
            "flow": (375, 771, 430, 18),
        },
        "M7": {
            "name": (111, 798, 75, 18),
            "flow": (375, 798, 430, 18),
        },
        "M8": {
            "name": (111, 825, 75, 18),
            "flow": (375, 825, 430, 18),
        },
        "M9": {
            "name": (111, 852, 75, 18),
            "flow": (375, 852, 430, 18),
        },
        "M10": {
            "name": (111, 878, 75, 18),
            "flow": (375, 878, 430, 18),
        },
        "M11": {
            "name": (111, 905, 75, 18),
            "flow": (375, 905, 430, 18),
        },
        "M13": {
            "name": (111, 932, 75, 18),
            "flow": (375, 932, 430, 18),
        },
        "M14": {
            "name": (111, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (111, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (111, 1012, 75, 18),
            "flow": (375, 1012, 430, 18),
        },
        "M17S": {
            "name": (111, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (111, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (111, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (111, 1200, 75, 18),
            "flow": (375, 1200, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1280, 75, 18),
            "flow": (375, 1280, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1307, 75, 18),
            "flow": (375, 1307, 430, 18),
        },
        "XIJIAO": {
            "name": (111, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1227, 75, 18),
            "flow": (375, 1227, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_07_04_2023_07_06(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 664, 75, 18),
            "flow": (375, 664, 430, 18),
        },
        "M2": {
            "name": (111, 691, 75, 18),
            "flow": (375, 691, 430, 18),
        },
        "M4DAXING": {
            "name": (111, 718, 75, 18),
            "flow": (375, 718, 430, 18),
        },
        "M5": {
            "name": (111, 744, 75, 18),
            "flow": (375, 744, 430, 18),
        },
        "M6": {
            "name": (111, 771, 75, 18),
            "flow": (375, 771, 430, 18),
        },
        "M7": {
            "name": (111, 798, 75, 18),
            "flow": (375, 798, 430, 18),
        },
        "M8": {
            "name": (111, 825, 75, 18),
            "flow": (375, 825, 430, 18),
        },
        "M9": {
            "name": (111, 852, 75, 18),
            "flow": (375, 852, 430, 18),
        },
        "M10": {
            "name": (111, 878, 75, 18),
            "flow": (375, 878, 430, 18),
        },
        "M11": {
            "name": (111, 905, 75, 18),
            "flow": (375, 905, 430, 18),
        },
        "M13": {
            "name": (111, 932, 75, 18),
            "flow": (375, 932, 430, 18),
        },
        "M14": {
            "name": (111, 959, 75, 18),
            "flow": (375, 959, 430, 18),
        },
        "M15": {
            "name": (111, 986, 75, 18),
            "flow": (375, 986, 430, 18),
        },
        "M16": {
            "name": (111, 1012, 75, 18),
            "flow": (375, 1012, 430, 18),
        },
        "M17S": {
            "name": (111, 1039, 75, 18),
            "flow": (375, 1039, 430, 18),
        },
        "M19": {
            "name": (111, 1066, 75, 18),
            "flow": (375, 1066, 430, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1146, 75, 18),
            "flow": (375, 1146, 430, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1119, 75, 18),
            "flow": (375, 1119, 430, 18),
        },
        "YANFANG": {
            "name": (111, 1173, 75, 18),
            "flow": (375, 1173, 430, 18),
        },
        "M26_S1": {
            "name": (111, 1200, 75, 18),
            "flow": (375, 1200, 430, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1093, 75, 18),
            "flow": (375, 1093, 430, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1280, 75, 18),
            "flow": (375, 1280, 430, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1307, 75, 18),
            "flow": (375, 1307, 430, 18),
        },
        "XIJIAO": {
            "name": (111, 1253, 75, 18),
            "flow": (375, 1253, 430, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1227, 75, 18),
            "flow": (375, 1227, 430, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(globals()[f"png_{line}_flow"])
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_29_2023_07_03(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False, 180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (186, 1151, 130, 30),
            "flow": (620, 1151, 715, 30),
        },
        "M2": {
            "name": (186, 1196, 130, 30),
            "flow": (620, 1196, 715, 30),
        },
        "M4DAXING": {
            "name": (186, 1241, 130, 30),
            "flow": (620, 1241, 715, 30),
        },
        "M5": {
            "name": (186, 1286, 130, 30),
            "flow": (620, 1286, 715, 30),
        },
        "M6": {
            "name": (186, 1330, 130, 30),
            "flow": (620, 1330, 715, 30),
        },
        "M7": {
            "name": (186, 1375, 130, 30),
            "flow": (620, 1375, 715, 30),
        },
        "M8": {
            "name": (186, 1420, 130, 30),
            "flow": (620, 1420, 715, 30),
        },
        "M9": {
            "name": (186, 1465, 130, 30),
            "flow": (620, 1465, 715, 30),
        },
        "M10": {
            "name": (186, 1510, 130, 30),
            "flow": (620, 1510, 715, 30),
        },
        "M11": {
            "name": (186, 1555, 130, 30),
            "flow": (620, 1555, 715, 30),
        },
        "M13": {
            "name": (186, 1599, 130, 30),
            "flow": (620, 1599, 715, 30),
        },
        "M14": {
            "name": (186, 1644, 130, 30),
            "flow": (620, 1644, 715, 30),
        },
        "M15": {
            "name": (186, 1689, 130, 30),
            "flow": (620, 1689, 715, 30),
        },
        "M16": {
            "name": (186, 1734, 130, 30),
            "flow": (620, 1734, 715, 30),
        },
        "M17S": {
            "name": (186, 1779, 130, 30),
            "flow": (620, 1779, 715, 30),
        },
        "M19": {
            "name": (186, 1824, 130, 30),
            "flow": (620, 1824, 715, 30),
        },
        "M24_YIZHUANG": {
            "name": (186, 1958, 130, 30),
            "flow": (620, 1958, 715, 30),
        },
        "M25_FANGSHAN": {
            "name": (186, 1913, 130, 30),
            "flow": (620, 1913, 715, 30),
        },
        "YANFANG": {
            "name": (186, 2003, 130, 30),
            "flow": (620, 2003, 715, 30),
        },
        "M26_S1": {
            "name": (186, 2048, 130, 30),
            "flow": (620, 2048, 715, 30),
        },
        "M27_CHANGPING": {
            "name": (186, 1868, 130, 30),
            "flow": (620, 1868, 715, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (186, 2182, 130, 30),
            "flow": (620, 2182, 715, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (186, 2227, 130, 30),
            "flow": (620, 2227, 715, 30),
        },
        "XIJIAO": {
            "name": (186, 2137, 130, 30),
            "flow": (620, 2137, 715, 30),
        },
        "YIZHUANGT1": {
            "name": (186, 2093, 130, 30),
            "flow": (620, 2093, 715, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 334, 887, 320, 45)
    png_flow = img_cut_center(png, 442, 943, 538, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  119).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_26_2023_06_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (109, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (109, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (109, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (109, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (109, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (109, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (109, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (109, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (109, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (109, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (109, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (109, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (109, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (109, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (109, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (109, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (109, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (109, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (109, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (109, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (109, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (109, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (109, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (109, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (109, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_25(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  200).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        match_lineflow = re.match(r"^\d+\.\d{1,2}$", globals()[f"text_{line}_flow"])
        if match_lineflow:
            single_linedata = {
                "name": line,
                "flow": globals()[f"text_{line}_flow"]
            }
        else:
            single_linedata = {
                "name": line,
                "flow": "ERROR"
            }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_24(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_23(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_22(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_20_2023_06_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 2))

    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_15_2023_06_19(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_14(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  190).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_13(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  190).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_10_2023_06_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_06_08_2023_06_09(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  190).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_05_22_2023_06_07(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_05_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  200).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_05_19_2023_05_20(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 418, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 418, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 418, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 418, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 418, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 418, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 418, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 418, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 418, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 418, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 418, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 418, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 418, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 418, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 418, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 418, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 418, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 418, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 418, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 418, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 418, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 418, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 418, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 418, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 418, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_05_18(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (120, 668, 75, 18),
            "flow": (372, 668, 410, 18),
        },
        "M2": {
            "name": (120, 696, 75, 18),
            "flow": (372, 696, 410, 18),
        },
        "M4DAXING": {
            "name": (120, 724, 75, 18),
            "flow": (372, 724, 410, 18),
        },
        "M5": {
            "name": (120, 751, 75, 18),
            "flow": (372, 751, 410, 18),
        },
        "M6": {
            "name": (120, 779, 75, 18),
            "flow": (372, 779, 410, 18),
        },
        "M7": {
            "name": (120, 807, 75, 18),
            "flow": (372, 807, 410, 18),
        },
        "M8": {
            "name": (120, 835, 75, 18),
            "flow": (372, 835, 410, 18),
        },
        "M9": {
            "name": (120, 863, 75, 18),
            "flow": (372, 863, 410, 18),
        },
        "M10": {
            "name": (120, 890, 75, 18),
            "flow": (372, 890, 410, 18),
        },
        "M11": {
            "name": (120, 918, 75, 18),
            "flow": (372, 918, 410, 18),
        },
        "M13": {
            "name": (120, 946, 75, 18),
            "flow": (372, 946, 410, 18),
        },
        "M14": {
            "name": (120, 974, 75, 18),
            "flow": (372, 974, 410, 18),
        },
        "M15": {
            "name": (120, 1002, 75, 18),
            "flow": (372, 1002, 410, 18),
        },
        "M16": {
            "name": (120, 1029, 75, 18),
            "flow": (372, 1029, 410, 18),
        },
        "M17S": {
            "name": (120, 1057, 75, 18),
            "flow": (372, 1057, 410, 18),
        },
        "M19": {
            "name": (120, 1085, 75, 18),
            "flow": (372, 1085, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (120, 1168, 75, 18),
            "flow": (372, 1168, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (120, 1140, 75, 18),
            "flow": (372, 1140, 410, 18),
        },
        "YANFANG": {
            "name": (120, 1196, 75, 18),
            "flow": (372, 1196, 410, 18),
        },
        "M26_S1": {
            "name": (120, 1224, 75, 18),
            "flow": (372, 1224, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (120, 1113, 75, 18),
            "flow": (372, 1113, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (120, 1307, 75, 18),
            "flow": (372, 1307, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (120, 1335, 75, 18),
            "flow": (372, 1335, 410, 18),
        },
        "XIJIAO": {
            "name": (120, 1279, 75, 18),
            "flow": (372, 1279, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (120, 1252, 75, 18),
            "flow": (372, 1252, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_05_06_2023_05_17(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 682, 75, 18),
            "flow": (368, 682, 415, 18),
        },
        "M2": {
            "name": (111, 709, 75, 18),
            "flow": (368, 709, 415, 18),
        },
        "M4DAXING": {
            "name": (111, 735, 75, 18),
            "flow": (368, 735, 415, 18),
        },
        "M5": {
            "name": (111, 762, 75, 18),
            "flow": (368, 762, 415, 18),
        },
        "M6": {
            "name": (111, 788, 75, 18),
            "flow": (368, 788, 415, 18),
        },
        "M7": {
            "name": (111, 815, 75, 18),
            "flow": (368, 815, 415, 18),
        },
        "M8": {
            "name": (111, 842, 75, 18),
            "flow": (368, 842, 415, 18),
        },
        "M9": {
            "name": (111, 868, 75, 18),
            "flow": (368, 868, 415, 18),
        },
        "M10": {
            "name": (111, 895, 75, 18),
            "flow": (368, 895, 415, 18),
        },
        "M11": {
            "name": (111, 921, 75, 18),
            "flow": (368, 921, 415, 18),
        },
        "M13": {
            "name": (111, 948, 75, 18),
            "flow": (368, 948, 415, 18),
        },
        "M14": {
            "name": (111, 974, 75, 18),
            "flow": (368, 974, 415, 18),
        },
        "M15": {
            "name": (111, 1001, 75, 18),
            "flow": (368, 1001, 415, 18),
        },
        "M16": {
            "name": (111, 1028, 75, 18),
            "flow": (368, 1028, 415, 18),
        },
        "M17S": {
            "name": (111, 1054, 75, 18),
            "flow": (368, 1054, 415, 18),
        },
        "M19": {
            "name": (111, 1081, 75, 18),
            "flow": (368, 1081, 415, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1161, 75, 18),
            "flow": (368, 1161, 415, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1134, 75, 18),
            "flow": (368, 1134, 415, 18),
        },
        "YANFANG": {
            "name": (111, 1187, 75, 18),
            "flow": (368, 1187, 415, 18),
        },
        "M26_S1": {
            "name": (111, 1214, 75, 18),
            "flow": (368, 1214, 415, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1107, 75, 18),
            "flow": (368, 1107, 415, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1293, 75, 18),
            "flow": (368, 1293, 415, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1320, 75, 18),
            "flow": (368, 1320, 415, 18),
        },
        "XIJIAO": {
            "name": (111, 1267, 75, 18),
            "flow": (368, 1267, 415, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1240, 75, 18),
            "flow": (368, 1240, 415, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(globals()[f"png_{line}_flow"])
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_05_01_2023_05_05(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 679, 75, 18),
            "flow": (373, 679, 424, 18),
        },
        "M2": {
            "name": (111, 706, 75, 18),
            "flow": (373, 706, 424, 18),
        },
        "M4DAXING": {
            "name": (111, 732, 75, 18),
            "flow": (373, 732, 424, 18),
        },
        "M5": {
            "name": (111, 759, 75, 18),
            "flow": (373, 759, 424, 18),
        },
        "M6": {
            "name": (111, 785, 75, 18),
            "flow": (373, 785, 424, 18),
        },
        "M7": {
            "name": (111, 812, 75, 18),
            "flow": (373, 812, 424, 18),
        },
        "M8": {
            "name": (111, 839, 75, 18),
            "flow": (373, 839, 424, 18),
        },
        "M9": {
            "name": (111, 865, 75, 18),
            "flow": (373, 865, 424, 18),
        },
        "M10": {
            "name": (111, 892, 75, 18),
            "flow": (373, 892, 424, 18),
        },
        "M11": {
            "name": (111, 918, 75, 18),
            "flow": (373, 918, 424, 18),
        },
        "M13": {
            "name": (111, 945, 75, 18),
            "flow": (373, 945, 424, 18),
        },
        "M14": {
            "name": (111, 971, 75, 18),
            "flow": (373, 971, 424, 18),
        },
        "M15": {
            "name": (111, 998, 75, 18),
            "flow": (373, 998, 424, 18),
        },
        "M16": {
            "name": (111, 1025, 75, 18),
            "flow": (373, 1025, 424, 18),
        },
        "M17S": {
            "name": (111, 1051, 75, 18),
            "flow": (373, 1051, 424, 18),
        },
        "M19": {
            "name": (111, 1078, 75, 18),
            "flow": (373, 1078, 424, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1158, 75, 18),
            "flow": (373, 1158, 424, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1131, 75, 18),
            "flow": (373, 1131, 424, 18),
        },
        "YANFANG": {
            "name": (111, 1184, 75, 18),
            "flow": (373, 1184, 424, 18),
        },
        "M26_S1": {
            "name": (111, 1211, 75, 18),
            "flow": (373, 1211, 424, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1104, 75, 18),
            "flow": (373, 1104, 424, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1290, 75, 18),
            "flow": (373, 1290, 424, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1317, 75, 18),
            "flow": (373, 1317, 424, 18),
        },
        "XIJIAO": {
            "name": (111, 1264, 75, 18),
            "flow": (373, 1264, 424, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1237, 75, 18),
            "flow": (373, 1237, 424, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_enhance(globals()[f"png_{line}_flow"], 1.5))
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_04_29_2023_04_30(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (111, 679, 75, 18),
            "flow": (368, 679, 415, 18),
        },
        "M2": {
            "name": (111, 706, 75, 18),
            "flow": (368, 706, 415, 18),
        },
        "M4DAXING": {
            "name": (111, 732, 75, 18),
            "flow": (368, 732, 415, 18),
        },
        "M5": {
            "name": (111, 759, 75, 18),
            "flow": (368, 759, 415, 18),
        },
        "M6": {
            "name": (111, 785, 75, 18),
            "flow": (368, 785, 415, 18),
        },
        "M7": {
            "name": (111, 812, 75, 18),
            "flow": (368, 812, 415, 18),
        },
        "M8": {
            "name": (111, 839, 75, 18),
            "flow": (368, 839, 415, 18),
        },
        "M9": {
            "name": (111, 865, 75, 18),
            "flow": (368, 865, 415, 18),
        },
        "M10": {
            "name": (111, 892, 75, 18),
            "flow": (368, 892, 415, 18),
        },
        "M11": {
            "name": (111, 918, 75, 18),
            "flow": (368, 918, 415, 18),
        },
        "M13": {
            "name": (111, 945, 75, 18),
            "flow": (368, 945, 415, 18),
        },
        "M14": {
            "name": (111, 971, 75, 18),
            "flow": (368, 971, 415, 18),
        },
        "M15": {
            "name": (111, 998, 75, 18),
            "flow": (368, 998, 415, 18),
        },
        "M16": {
            "name": (111, 1025, 75, 18),
            "flow": (368, 1025, 415, 18),
        },
        "M17S": {
            "name": (111, 1051, 75, 18),
            "flow": (368, 1051, 415, 18),
        },
        "M19": {
            "name": (111, 1078, 75, 18),
            "flow": (368, 1078, 415, 18),
        },
        "M24_YIZHUANG": {
            "name": (111, 1158, 75, 18),
            "flow": (368, 1158, 415, 18),
        },
        "M25_FANGSHAN": {
            "name": (111, 1131, 75, 18),
            "flow": (368, 1131, 415, 18),
        },
        "YANFANG": {
            "name": (111, 1184, 75, 18),
            "flow": (368, 1184, 415, 18),
        },
        "M26_S1": {
            "name": (111, 1211, 75, 18),
            "flow": (368, 1211, 415, 18),
        },
        "M27_CHANGPING": {
            "name": (111, 1104, 75, 18),
            "flow": (368, 1104, 415, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (111, 1290, 75, 18),
            "flow": (368, 1290, 415, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (111, 1317, 75, 18),
            "flow": (368, 1317, 415, 18),
        },
        "XIJIAO": {
            "name": (111, 1264, 75, 18),
            "flow": (368, 1264, 415, 18),
        },
        "YIZHUANGT1": {
            "name": (111, 1237, 75, 18),
            "flow": (368, 1237, 415, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  205).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_04_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 674, 79, 18),
            "flow": (370, 674, 410, 18),
        },
        "M2": {
            "name": (117, 700, 79, 18),
            "flow": (370, 700, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 726, 79, 18),
            "flow": (370, 726, 410, 18),
        },
        "M5": {
            "name": (117, 752, 79, 18),
            "flow": (370, 752, 410, 18),
        },
        "M6": {
            "name": (117, 778, 79, 18),
            "flow": (370, 778, 410, 18),
        },
        "M7": {
            "name": (117, 804, 79, 18),
            "flow": (370, 804, 410, 18),
        },
        "M8": {
            "name": (117, 831, 79, 18),
            "flow": (370, 831, 410, 18),
        },
        "M9": {
            "name": (117, 857, 79, 18),
            "flow": (370, 857, 410, 18),
        },
        "M10": {
            "name": (117, 883, 79, 18),
            "flow": (370, 883, 410, 18),
        },
        "M11": {
            "name": (117, 909, 79, 18),
            "flow": (370, 909, 410, 18),
        },
        "M13": {
            "name": (117, 935, 79, 18),
            "flow": (370, 935, 410, 18),
        },
        "M14": {
            "name": (117, 961, 79, 18),
            "flow": (370, 961, 410, 18),
        },
        "M15": {
            "name": (117, 987, 79, 18),
            "flow": (370, 987, 410, 18),
        },
        "M16": {
            "name": (117, 1013, 79, 18),
            "flow": (370, 1013, 410, 18),
        },
        "M17S": {
            "name": (117, 1039, 79, 18),
            "flow": (370, 1039, 410, 18),
        },
        "M19": {
            "name": (117, 1065, 79, 18),
            "flow": (370, 1065, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1144, 79, 18),
            "flow": (370, 1144, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1117, 79, 18),
            "flow": (370, 1117, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1170, 79, 18),
            "flow": (370, 1170, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1196, 79, 18),
            "flow": (370, 1196, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1091, 79, 18),
            "flow": (370, 1091, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1274, 79, 18),
            "flow": (370, 1274, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1300, 79, 18),
            "flow": (370, 1300, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1248, 79, 18),
            "flow": (370, 1248, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1222, 79, 18),
            "flow": (370, 1222, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  215).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_31_2023_04_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 846, 79, 18),
            "flow": (370, 846, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 923, 79, 18),
            "flow": (370, 923, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1051, 79, 18),
            "flow": (370, 1051, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1128, 79, 18),
            "flow": (370, 1128, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1154, 79, 18),
            "flow": (370, 1154, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1077, 79, 18),
            "flow": (370, 1077, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1256, 79, 18),
            "flow": (370, 1256, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1282, 79, 18),
            "flow": (370, 1282, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1231, 79, 18),
            "flow": (370, 1231, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1205, 79, 18),
            "flow": (370, 1205, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 525, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_30(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 846, 79, 18),
            "flow": (370, 846, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 923, 79, 18),
            "flow": (370, 923, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1051, 79, 18),
            "flow": (370, 1051, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1128, 79, 18),
            "flow": (370, 1128, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1154, 79, 18),
            "flow": (370, 1154, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1077, 79, 18),
            "flow": (370, 1077, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1256, 79, 18),
            "flow": (370, 1256, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1282, 79, 18),
            "flow": (370, 1282, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1231, 79, 18),
            "flow": (370, 1231, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1205, 79, 18),
            "flow": (370, 1205, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  190).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_29(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 660, 79, 18),
            "flow": (370, 660, 410, 18),
        },
        "M2": {
            "name": (117, 688, 79, 18),
            "flow": (370, 688, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 716, 79, 18),
            "flow": (370, 716, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 771, 79, 18),
            "flow": (370, 771, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 827, 79, 18),
            "flow": (370, 827, 410, 18),
        },
        "M9": {
            "name": (117, 855, 79, 18),
            "flow": (370, 855, 410, 18),
        },
        "M10": {
            "name": (117, 882, 79, 18),
            "flow": (370, 882, 410, 18),
        },
        "M11": {
            "name": (117, 910, 79, 18),
            "flow": (370, 910, 410, 18),
        },
        "M13": {
            "name": (117, 938, 79, 18),
            "flow": (370, 938, 410, 18),
        },
        "M14": {
            "name": (117, 966, 79, 18),
            "flow": (370, 966, 410, 18),
        },
        "M15": {
            "name": (117, 994, 79, 18),
            "flow": (370, 994, 410, 18),
        },
        "M16": {
            "name": (117, 1021, 79, 18),
            "flow": (370, 1021, 410, 18),
        },
        "M17S": {
            "name": (117, 1049, 79, 18),
            "flow": (370, 1049, 410, 18),
        },
        "M19": {
            "name": (117, 1077, 79, 18),
            "flow": (370, 1077, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1160, 79, 18),
            "flow": (370, 1160, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1132, 79, 18),
            "flow": (370, 1132, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1188, 79, 18),
            "flow": (370, 1188, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1216, 79, 18),
            "flow": (370, 1216, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1105, 79, 18),
            "flow": (370, 1105, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1299, 79, 18),
            "flow": (370, 1299, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1327, 79, 18),
            "flow": (370, 1327, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1271, 79, 18),
            "flow": (370, 1271, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1244, 79, 18),
            "flow": (370, 1244, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_17_2023_03_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 846, 79, 18),
            "flow": (370, 846, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 923, 79, 18),
            "flow": (370, 923, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1051, 79, 18),
            "flow": (370, 1051, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1128, 79, 18),
            "flow": (370, 1128, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1154, 79, 18),
            "flow": (370, 1154, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1077, 79, 18),
            "flow": (370, 1077, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1256, 79, 18),
            "flow": (370, 1256, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1282, 79, 18),
            "flow": (370, 1282, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1231, 79, 18),
            "flow": (370, 1231, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1205, 79, 18),
            "flow": (370, 1205, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_16(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 653, 79, 18),
            "flow": (370, 653, 410, 18),
        },
        "M2": {
            "name": (117, 679, 79, 18),
            "flow": (370, 679, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 705, 79, 18),
            "flow": (370, 705, 410, 18),
        },
        "M5": {
            "name": (117, 731, 79, 18),
            "flow": (370, 731, 410, 18),
        },
        "M6": {
            "name": (117, 757, 79, 18),
            "flow": (370, 757, 410, 18),
        },
        "M7": {
            "name": (117, 782, 79, 18),
            "flow": (370, 782, 410, 18),
        },
        "M8": {
            "name": (117, 808, 79, 18),
            "flow": (370, 808, 410, 18),
        },
        "M9": {
            "name": (117, 834, 79, 18),
            "flow": (370, 834, 410, 18),
        },
        "M10": {
            "name": (117, 860, 79, 18),
            "flow": (370, 860, 410, 18),
        },
        "M11": {
            "name": (117, 886, 79, 18),
            "flow": (370, 886, 410, 18),
        },
        "M13": {
            "name": (117, 912, 79, 18),
            "flow": (370, 912, 410, 18),
        },
        "M14": {
            "name": (117, 938, 79, 18),
            "flow": (370, 938, 410, 18),
        },
        "M15": {
            "name": (117, 964, 79, 18),
            "flow": (370, 964, 410, 18),
        },
        "M16": {
            "name": (117, 989, 79, 18),
            "flow": (370, 989, 410, 18),
        },
        "M17S": {
            "name": (117, 1015, 79, 18),
            "flow": (370, 1015, 410, 18),
        },
        "M19": {
            "name": (117, 1041, 79, 18),
            "flow": (370, 1041, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1119, 79, 18),
            "flow": (370, 1119, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1093, 79, 18),
            "flow": (370, 1093, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1145, 79, 18),
            "flow": (370, 1145, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1171, 79, 18),
            "flow": (370, 1171, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1067, 79, 18),
            "flow": (370, 1067, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1248, 79, 18),
            "flow": (370, 1248, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1274, 79, 18),
            "flow": (370, 1274, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1222, 79, 18),
            "flow": (370, 1222, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1196, 79, 18),
            "flow": (370, 1196, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 528, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_08_2023_03_15(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 846, 79, 18),
            "flow": (370, 846, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 923, 79, 18),
            "flow": (370, 923, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1051, 79, 18),
            "flow": (370, 1051, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1128, 79, 18),
            "flow": (370, 1128, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1154, 79, 18),
            "flow": (370, 1154, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1077, 79, 18),
            "flow": (370, 1077, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1256, 79, 18),
            "flow": (370, 1256, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1282, 79, 18),
            "flow": (370, 1282, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1231, 79, 18),
            "flow": (370, 1231, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1205, 79, 18),
            "flow": (370, 1205, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 528, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_05_2023_03_07(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 845, 79, 18),
            "flow": (370, 845, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1127, 79, 18),
            "flow": (370, 1127, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1153, 79, 18),
            "flow": (370, 1153, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1076, 79, 18),
            "flow": (370, 1076, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1255, 79, 18),
            "flow": (370, 1255, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1281, 79, 18),
            "flow": (370, 1281, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1230, 79, 18),
            "flow": (370, 1230, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1206, 79, 18),
            "flow": (370, 1206, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 189, 528, 175, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  215).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
  
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_04(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (113, 660, 79, 18),
            "flow": (370, 660, 410, 18),
        },
        "M2": {
            "name": (113, 686, 79, 18),
            "flow": (370, 686, 410, 18),
        },
        "M4DAXING": {
            "name": (113, 712, 79, 18),
            "flow": (370, 712, 410, 18),
        },
        "M5": {
            "name": (113, 739, 79, 18),
            "flow": (370, 739, 410, 18),
        },
        "M6": {
            "name": (113, 765, 79, 18),
            "flow": (370, 765, 410, 18),
        },
        "M7": {
            "name": (113, 791, 79, 18),
            "flow": (370, 791, 410, 18),
        },
        "M8": {
            "name": (113, 817, 79, 18),
            "flow": (370, 817, 410, 18),
        },
        "M9": {
            "name": (113, 843, 79, 18),
            "flow": (370, 843, 410, 18),
        },
        "M10": {
            "name": (113, 869, 79, 18),
            "flow": (370, 869, 410, 18),
        },
        "M11": {
            "name": (113, 896, 79, 18),
            "flow": (370, 896, 410, 18),
        },
        "M13": {
            "name": (113, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (113, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (113, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (113, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (113, 1026, 79, 18),
            "flow": (370, 1026, 410, 18),
        },
        "M19": {
            "name": (113, 1053, 79, 18),
            "flow": (370, 1053, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (113, 1131, 79, 18),
            "flow": (370, 1131, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (113, 1105, 79, 18),
            "flow": (370, 1105, 410, 18),
        },
        "YANFANG": {
            "name": (113, 1157, 79, 18),
            "flow": (370, 1157, 410, 18),
        },
        "M26_S1": {
            "name": (113, 1183, 79, 18),
            "flow": (370, 1183, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (113, 1079, 79, 18),
            "flow": (370, 1079, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (113, 1262, 79, 18),
            "flow": (370, 1262, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (113, 1288, 79, 18),
            "flow": (370, 1288, 410, 18),
        },
        "XIJIAO": {
            "name": (113, 1236, 79, 18),
            "flow": (370, 1236, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (113, 1210, 79, 18),
            "flow": (370, 1210, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 191, 528, 169, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  200).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_03(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (115, 660, 79, 18),
            "flow": (370, 660, 410, 18),
        },
        "M2": {
            "name": (115, 686, 79, 18),
            "flow": (370, 686, 410, 18),
        },
        "M4DAXING": {
            "name": (115, 712, 79, 18),
            "flow": (370, 712, 410, 18),
        },
        "M5": {
            "name": (115, 739, 79, 18),
            "flow": (370, 739, 410, 18),
        },
        "M6": {
            "name": (115, 765, 79, 18),
            "flow": (370, 765, 410, 18),
        },
        "M7": {
            "name": (115, 791, 79, 18),
            "flow": (370, 791, 410, 18),
        },
        "M8": {
            "name": (115, 817, 79, 18),
            "flow": (370, 817, 410, 18),
        },
        "M9": {
            "name": (115, 843, 79, 18),
            "flow": (370, 843, 410, 18),
        },
        "M10": {
            "name": (115, 869, 79, 18),
            "flow": (370, 869, 410, 18),
        },
        "M11": {
            "name": (115, 896, 79, 18),
            "flow": (370, 896, 410, 18),
        },
        "M13": {
            "name": (115, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (115, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (115, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (115, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (115, 1026, 79, 18),
            "flow": (370, 1026, 410, 18),
        },
        "M19": {
            "name": (115, 1053, 79, 18),
            "flow": (370, 1053, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (115, 1131, 79, 18),
            "flow": (370, 1131, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (115, 1105, 79, 18),
            "flow": (370, 1105, 410, 18),
        },
        "YANFANG": {
            "name": (115, 1157, 79, 18),
            "flow": (370, 1157, 410, 18),
        },
        "M26_S1": {
            "name": (115, 1183, 79, 18),
            "flow": (370, 1183, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (115, 1079, 79, 18),
            "flow": (370, 1079, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (115, 1262, 79, 18),
            "flow": (370, 1262, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (115, 1288, 79, 18),
            "flow": (370, 1288, 410, 18),
        },
        "XIJIAO": {
            "name": (115, 1236, 79, 18),
            "flow": (370, 1236, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (115, 1210, 79, 18),
            "flow": (370, 1210, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 191, 528, 169, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  215).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_03_02(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 845, 79, 18),
            "flow": (370, 845, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1127, 79, 18),
            "flow": (370, 1127, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1153, 79, 18),
            "flow": (370, 1153, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1076, 79, 18),
            "flow": (370, 1076, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1255, 79, 18),
            "flow": (370, 1255, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1281, 79, 18),
            "flow": (370, 1281, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1230, 79, 18),
            "flow": (370, 1230, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1204, 79, 18),
            "flow": (370, 1204, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 190, 528, 180, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_02_14_2023_03_01(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 845, 79, 18),
            "flow": (370, 845, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1127, 79, 18),
            "flow": (370, 1127, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1153, 79, 18),
            "flow": (370, 1153, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1076, 79, 18),
            "flow": (370, 1076, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1255, 79, 18),
            "flow": (370, 1255, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1281, 79, 18),
            "flow": (370, 1281, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1230, 79, 18),
            "flow": (370, 1230, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1204, 79, 18),
            "flow": (370, 1204, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_02_13(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 773, 79, 18),
            "flow": (370, 773, 410, 18),
        },
        "M7": {
            "name": (117, 798, 79, 18),
            "flow": (370, 798, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1024, 79, 18),
            "flow": (370, 1024, 410, 18),
        },
        "M19": {
            "name": (117, 1049, 79, 18),
            "flow": (370, 1049, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1099, 79, 18),
            "flow": (370, 1099, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1175, 79, 18),
            "flow": (370, 1175, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1074, 79, 18),
            "flow": (370, 1074, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1250, 79, 18),
            "flow": (370, 1250, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1275, 79, 18),
            "flow": (370, 1275, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1225, 79, 18),
            "flow": (370, 1225, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1200, 79, 18),
            "flow": (370, 1200, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_02_10_2023_02_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 845, 79, 18),
            "flow": (370, 845, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1127, 79, 18),
            "flow": (370, 1127, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1153, 79, 18),
            "flow": (370, 1153, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1076, 79, 18),
            "flow": (370, 1076, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1255, 79, 18),
            "flow": (370, 1255, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1281, 79, 18),
            "flow": (370, 1281, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1230, 79, 18),
            "flow": (370, 1230, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1204, 79, 18),
            "flow": (370, 1204, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_02_02_2023_02_09(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 845, 79, 18),
            "flow": (370, 845, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1127, 79, 18),
            "flow": (370, 1127, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1153, 79, 18),
            "flow": (370, 1153, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1076, 79, 18),
            "flow": (370, 1076, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1255, 79, 18),
            "flow": (370, 1255, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1281, 79, 18),
            "flow": (370, 1281, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1230, 79, 18),
            "flow": (370, 1230, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1204, 79, 18),
            "flow": (370, 1204, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 192, 528, 179, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_01_23_2023_02_01(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 666, 79, 18),
            "flow": (370, 666, 410, 18),
        },
        "M2": {
            "name": (117, 692, 79, 18),
            "flow": (370, 692, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (117, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (117, 769, 79, 18),
            "flow": (370, 769, 410, 18),
        },
        "M7": {
            "name": (117, 794, 79, 18),
            "flow": (370, 794, 410, 18),
        },
        "M8": {
            "name": (117, 820, 79, 18),
            "flow": (370, 820, 410, 18),
        },
        "M9": {
            "name": (117, 845, 79, 18),
            "flow": (370, 845, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1127, 79, 18),
            "flow": (370, 1127, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1102, 79, 18),
            "flow": (370, 1102, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1153, 79, 18),
            "flow": (370, 1153, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1179, 79, 18),
            "flow": (370, 1179, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1076, 79, 18),
            "flow": (370, 1076, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1255, 79, 18),
            "flow": (370, 1255, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1281, 79, 18),
            "flow": (370, 1281, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1230, 79, 18),
            "flow": (370, 1230, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1204, 79, 18),
            "flow": (370, 1204, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  195).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_01_10_2023_01_22(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 197, 528, 182, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_01_09(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (123, 662, 72, 18),
            "flow": (370, 662, 410, 18),
        },
        "M2": {
            "name": (123, 688, 72, 18),
            "flow": (370, 688, 410, 18),
        },
        "M4DAXING": {
            "name": (123, 714, 72, 18),
            "flow": (370, 714, 410, 18),
        },
        "M5": {
            "name": (123, 740, 72, 18),
            "flow": (370, 740, 410, 18),
        },
        "M6": {
            "name": (123, 766, 72, 18),
            "flow": (370, 766, 410, 18),
        },
        "M7": {
            "name": (123, 792, 72, 18),
            "flow": (370, 792, 410, 18),
        },
        "M8": {
            "name": (123, 818, 72, 18),
            "flow": (370, 818, 410, 18),
        },
        "M9": {
            "name": (123, 844, 72, 18),
            "flow": (370, 844, 410, 18),
        },
        "M10": {
            "name": (123, 870, 72, 18),
            "flow": (370, 870, 410, 18),
        },
        "M11": {
            "name": (123, 896, 72, 18),
            "flow": (370, 896, 410, 18),
        },
        "M13": {
            "name": (123, 922, 72, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (123, 948, 72, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (123, 974, 72, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (123, 1000, 72, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (123, 1026, 72, 18),
            "flow": (370, 1026, 410, 18),
        },
        "M19": {
            "name": (123, 1052, 72, 18),
            "flow": (370, 1052, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (123, 1130, 72, 18),
            "flow": (370, 1130, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (123, 1104, 72, 18),
            "flow": (370, 1104, 410, 18),
        },
        "YANFANG": {
            "name": (123, 1156, 72, 18),
            "flow": (370, 1156, 410, 18),
        },
        "M26_S1": {
            "name": (123, 1182, 72, 18),
            "flow": (370, 1182, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (123, 1078, 72, 18),
            "flow": (370, 1078, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (123, 1260, 72, 18),
            "flow": (370, 1260, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (123, 1286, 72, 18),
            "flow": (370, 1286, 410, 18),
        },
        "XIJIAO": {
            "name": (123, 1234, 72, 18),
            "flow": (370, 1234, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (123, 1208, 72, 18),
            "flow": (370, 1208, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 190, 528, 168, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_01_04_2023_01_08(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 190, 528, 168, 25)
    png_flow = img_cut_center(png, 257, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_01_02_2023_01_03(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 180, 528, 168, 25)
    png_flow = img_cut_center(png, 247, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2023_01_01(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (114, 657, 79, 18),
            "flow": (370, 657, 410, 18),
        },
        "M2": {
            "name": (114, 683, 79, 18),
            "flow": (370, 683, 410, 18),
        },
        "M4DAXING": {
            "name": (114, 708, 79, 18),
            "flow": (370, 708, 410, 18),
        },
        "M5": {
            "name": (114, 734, 79, 18),
            "flow": (370, 734, 410, 18),
        },
        "M6": {
            "name": (114, 759, 79, 18),
            "flow": (370, 759, 410, 18),
        },
        "M7": {
            "name": (114, 785, 79, 18),
            "flow": (370, 785, 410, 18),
        },
        "M8": {
            "name": (114, 810, 79, 18),
            "flow": (370, 810, 410, 18),
        },
        "M9": {
            "name": (114, 836, 79, 18),
            "flow": (370, 836, 410, 18),
        },
        "M10": {
            "name": (114, 861, 79, 18),
            "flow": (370, 861, 410, 18),
        },
        "M11": {
            "name": (114, 887, 79, 18),
            "flow": (370, 887, 410, 18),
        },
        "M13": {
            "name": (114, 912, 79, 18),
            "flow": (370, 912, 410, 18),
        },
        "M14": {
            "name": (114, 938, 79, 18),
            "flow": (370, 938, 410, 18),
        },
        "M15": {
            "name": (114, 964, 79, 18),
            "flow": (370, 964, 410, 18),
        },
        "M16": {
            "name": (114, 989, 79, 18),
            "flow": (370, 989, 410, 18),
        },
        "M17S": {
            "name": (114, 1015, 79, 18),
            "flow": (370, 1015, 410, 18),
        },
        "M19": {
            "name": (114, 1040, 79, 18),
            "flow": (370, 1040, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (114, 1117, 79, 18),
            "flow": (370, 1117, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (114, 1091, 79, 18),
            "flow": (370, 1091, 410, 18),
        },
        "YANFANG": {
            "name": (114, 1142, 79, 18),
            "flow": (370, 1142, 410, 18),
        },
        "M26_S1": {
            "name": (114, 1168, 79, 18),
            "flow": (370, 1168, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (114, 1066, 79, 18),
            "flow": (370, 1066, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (114, 1244, 79, 18),
            "flow": (370, 1244, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (114, 1270, 79, 18),
            "flow": (370, 1270, 410, 18),
        },
        "XIJIAO": {
            "name": (114, 1219, 79, 18),
            "flow": (370, 1219, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (114, 1193, 79, 18),
            "flow": (370, 1193, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 180, 525, 166, 25)
    png_flow = img_cut_center(png, 247, 557, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  215).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_12_28_2022_12_31(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 195, 528, 197, 25)
    png_flow = img_cut_center(png, 247, 558, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_12_24_2022_12_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 192, 528, 192, 25)
    png_flow = img_cut_center(png, 247, 561, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_12_23(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (114, 658, 79, 18),
            "flow": (370, 658, 410, 18),
        },
        "M2": {
            "name": (114, 683, 79, 18),
            "flow": (370, 683, 410, 18),
        },
        "M4DAXING": {
            "name": (114, 709, 79, 18),
            "flow": (370, 709, 410, 18),
        },
        "M5": {
            "name": (114, 734, 79, 18),
            "flow": (370, 734, 410, 18),
        },
        "M6": {
            "name": (114, 760, 79, 18),
            "flow": (370, 760, 410, 18),
        },
        "M7": {
            "name": (114, 785, 79, 18),
            "flow": (370, 785, 410, 18),
        },
        "M8": {
            "name": (114, 811, 79, 18),
            "flow": (370, 811, 410, 18),
        },
        "M9": {
            "name": (114, 836, 79, 18),
            "flow": (370, 836, 410, 18),
        },
        "M10": {
            "name": (114, 862, 79, 18),
            "flow": (370, 862, 410, 18),
        },
        "M11": {
            "name": (114, 887, 79, 18),
            "flow": (370, 887, 410, 18),
        },
        "M13": {
            "name": (114, 913, 79, 18),
            "flow": (370, 913, 410, 18),
        },
        "M14": {
            "name": (114, 938, 79, 18),
            "flow": (370, 938, 410, 18),
        },
        "M15": {
            "name": (114, 964, 79, 18),
            "flow": (370, 964, 410, 18),
        },
        "M16": {
            "name": (114, 989, 79, 18),
            "flow": (370, 989, 410, 18),
        },
        "M17S": {
            "name": (114, 1014, 79, 18),
            "flow": (370, 1014, 410, 18),
        },
        "M19": {
            "name": (114, 1040, 79, 18),
            "flow": (370, 1040, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (114, 1116, 79, 18),
            "flow": (370, 1116, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (114, 1091, 79, 18),
            "flow": (370, 1091, 410, 18),
        },
        "YANFANG": {
            "name": (114, 1142, 79, 18),
            "flow": (370, 1142, 410, 18),
        },
        "M26_S1": {
            "name": (114, 1167, 79, 18),
            "flow": (370, 1167, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (114, 1065, 79, 18),
            "flow": (370, 1065, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (114, 1244, 79, 18),
            "flow": (370, 1244, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (114, 1269, 79, 18),
            "flow": (370, 1269, 410, 18),
        },
        "XIJIAO": {
            "name": (114, 1218, 79, 18),
            "flow": (370, 1218, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (114, 1193, 79, 18),
            "flow": (370, 1193, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 191, 528, 190, 25)
    png_flow = img_cut_center(png, 247, 561, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  215).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_12_13_2022_12_22(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 191, 528, 190, 25)
    png_flow = img_cut_center(png, 247, 561, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_12_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (114, 668, 79, 18),
            "flow": (370, 668, 410, 18),
        },
        "M2": {
            "name": (114, 693, 79, 18),
            "flow": (370, 693, 410, 18),
        },
        "M4DAXING": {
            "name": (114, 717, 79, 18),
            "flow": (370, 717, 410, 18),
        },
        "M5": {
            "name": (114, 742, 79, 18),
            "flow": (370, 742, 410, 18),
        },
        "M6": {
            "name": (114, 766, 79, 18),
            "flow": (370, 766, 410, 18),
        },
        "M7": {
            "name": (114, 791, 79, 18),
            "flow": (370, 791, 410, 18),
        },
        "M8": {
            "name": (114, 816, 79, 18),
            "flow": (370, 816, 410, 18),
        },
        "M9": {
            "name": (114, 840, 79, 18),
            "flow": (370, 840, 410, 18),
        },
        "M10": {
            "name": (114, 865, 79, 18),
            "flow": (370, 865, 410, 18),
        },
        "M11": {
            "name": (114, 889, 79, 18),
            "flow": (370, 889, 410, 18),
        },
        "M13": {
            "name": (114, 914, 79, 18),
            "flow": (370, 914, 410, 18),
        },
        "M14": {
            "name": (114, 938, 79, 18),
            "flow": (370, 938, 410, 18),
        },
        "M15": {
            "name": (114, 963, 79, 18),
            "flow": (370, 963, 410, 18),
        },
        "M16": {
            "name": (114, 988, 79, 18),
            "flow": (370, 988, 410, 18),
        },
        "M17S": {
            "name": (114, 1012, 79, 18),
            "flow": (370, 1012, 410, 18),
        },
        "M19": {
            "name": (114, 1037, 79, 18),
            "flow": (370, 1037, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (114, 1111, 79, 18),
            "flow": (370, 1111, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (114, 1086, 79, 18),
            "flow": (370, 1086, 410, 18),
        },
        "YANFANG": {
            "name": (114, 1135, 79, 18),
            "flow": (370, 1135, 410, 18),
        },
        "M26_S1": {
            "name": (114, 1160, 79, 18),
            "flow": (370, 1160, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (114, 1061, 79, 18),
            "flow": (370, 1061, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (114, 1233, 79, 18),
            "flow": (370, 1233, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (114, 1258, 79, 18),
            "flow": (370, 1258, 410, 18),
        },
        "XIJIAO": {
            "name": (114, 1209, 79, 18),
            "flow": (370, 1209, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (114, 1184, 79, 18),
            "flow": (370, 1184, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 189, 528, 185, 25)
    png_flow = img_cut_center(png, 247, 561, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  215).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_12_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (114, 670, 79, 18),
            "flow": (370, 670, 410, 18),
        },
        "M2": {
            "name": (114, 694, 79, 18),
            "flow": (370, 694, 410, 18),
        },
        "M4DAXING": {
            "name": (114, 719, 79, 18),
            "flow": (370, 719, 410, 18),
        },
        "M5": {
            "name": (114, 743, 79, 18),
            "flow": (370, 743, 410, 18),
        },
        "M6": {
            "name": (114, 768, 79, 18),
            "flow": (370, 768, 410, 18),
        },
        "M7": {
            "name": (114, 792, 79, 18),
            "flow": (370, 792, 410, 18),
        },
        "M8": {
            "name": (114, 817, 79, 18),
            "flow": (370, 817, 410, 18),
        },
        "M9": {
            "name": (114, 841, 79, 18),
            "flow": (370, 841, 410, 18),
        },
        "M10": {
            "name": (114, 865, 79, 18),
            "flow": (370, 865, 410, 18),
        },
        "M11": {
            "name": (114, 890, 79, 18),
            "flow": (370, 890, 410, 18),
        },
        "M13": {
            "name": (114, 914, 79, 18),
            "flow": (370, 914, 410, 18),
        },
        "M14": {
            "name": (114, 939, 79, 18),
            "flow": (370, 939, 410, 18),
        },
        "M15": {
            "name": (114, 963, 79, 18),
            "flow": (370, 963, 410, 18),
        },
        "M16": {
            "name": (114, 987, 79, 18),
            "flow": (370, 987, 410, 18),
        },
        "M17S": {
            "name": (114, 1012, 79, 18),
            "flow": (370, 1012, 410, 18),
        },
        "M19": {
            "name": (114, 1036, 79, 18),
            "flow": (370, 1036, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (114, 1110, 79, 18),
            "flow": (370, 1110, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (114, 1085, 79, 18),
            "flow": (370, 1085, 410, 18),
        },
        "YANFANG": {
            "name": (114, 1134, 79, 18),
            "flow": (370, 1134, 410, 18),
        },
        "M26_S1": {
            "name": (114, 1158, 79, 18),
            "flow": (370, 1158, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (114, 1061, 79, 18),
            "flow": (370, 1061, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (114, 1232, 79, 18),
            "flow": (370, 1232, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (114, 1256, 79, 18),
            "flow": (370, 1256, 410, 18),
        },
        "XIJIAO": {
            "name": (114, 1207, 79, 18),
            "flow": (370, 1207, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (114, 1183, 79, 18),
            "flow": (370, 1183, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 189, 528, 185, 25)
    png_flow = img_cut_center(png, 247, 561, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  215).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_12_03_2022_12_10(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 189, 528, 185, 25)
    png_flow = img_cut_center(png, 247, 561, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_11_16_2022_12_02(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 187, 533, 185, 25)
    png_flow = img_cut_center(png, 247, 565, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 100).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_11_15(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 662, 79, 18),
            "flow": (370, 662, 410, 18),
        },
        "M2": {
            "name": (117, 688, 79, 18),
            "flow": (370, 688, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 714, 79, 18),
            "flow": (370, 714, 410, 18),
        },
        "M5": {
            "name": (117, 740, 79, 18),
            "flow": (370, 740, 410, 18),
        },
        "M6": {
            "name": (117, 766, 79, 18),
            "flow": (370, 766, 410, 18),
        },
        "M7": {
            "name": (117, 792, 79, 18),
            "flow": (370, 792, 410, 18),
        },
        "M8": {
            "name": (117, 818, 79, 18),
            "flow": (370, 818, 410, 18),
        },
        "M9": {
            "name": (117, 844, 79, 18),
            "flow": (370, 844, 410, 18),
        },
        "M10": {
            "name": (117, 870, 79, 18),
            "flow": (370, 870, 410, 18),
        },
        "M11": {
            "name": (117, 896, 79, 18),
            "flow": (370, 896, 410, 18),
        },
        "M13": {
            "name": (117, 922, 79, 18),
            "flow": (370, 922, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1026, 79, 18),
            "flow": (370, 1026, 410, 18),
        },
        "M19": {
            "name": (117, 1052, 79, 18),
            "flow": (370, 1052, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1130, 79, 18),
            "flow": (370, 1130, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1104, 79, 18),
            "flow": (370, 1104, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1156, 79, 18),
            "flow": (370, 1156, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1182, 79, 18),
            "flow": (370, 1182, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1078, 79, 18),
            "flow": (370, 1078, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1260, 79, 18),
            "flow": (370, 1260, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1286, 79, 18),
            "flow": (370, 1286, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1234, 79, 18),
            "flow": (370, 1234, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1208, 79, 18),
            "flow": (370, 1208, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 191, 533, 193, 25)
    png_flow = img_cut_center(png, 247, 565, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 105).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 35).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  175).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_11_12_2022_11_14(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 191, 533, 193, 25)
    png_flow = img_cut_center(png, 247, 565, 305, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 105).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_11_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (194, 1131, 135, 30),
            "flow": (627, 1131, 700, 30),
        },
        "M2": {
            "name": (194, 1172, 135, 30),
            "flow": (627, 1172, 700, 30),
        },
        "M4DAXING": {
            "name": (194, 1213, 135, 30),
            "flow": (627, 1213, 700, 30),
        },
        "M5": {
            "name": (194, 1255, 135, 30),
            "flow": (627, 1255, 700, 30),
        },
        "M6": {
            "name": (194, 1296, 135, 30),
            "flow": (627, 1296, 700, 30),
        },
        "M7": {
            "name": (194, 1337, 135, 30),
            "flow": (627, 1337, 700, 30),
        },
        "M8": {
            "name": (194, 1378, 135, 30),
            "flow": (627, 1378, 700, 30),
        },
        "M9": {
            "name": (194, 1419, 135, 30),
            "flow": (627, 1419, 700, 30),
        },
        "M10": {
            "name": (194, 1460, 135, 30),
            "flow": (627, 1460, 700, 30),
        },
        "M11": {
            "name": (194, 1502, 135, 30),
            "flow": (627, 1502, 700, 30),
        },
        "M13": {
            "name": (194, 1543, 135, 30),
            "flow": (627, 1543, 700, 30),
        },
        "M14": {
            "name": (194, 1584, 135, 30),
            "flow": (627, 1584, 700, 30),
        },
        "M15": {
            "name": (194, 1625, 135, 30),
            "flow": (627, 1625, 700, 30),
        },
        "M16": {
            "name": (194, 1666, 135, 30),
            "flow": (627, 1666, 700, 30),
        },
        "M17S": {
            "name": (194, 1707, 135, 30),
            "flow": (627, 1707, 700, 30),
        },
        "M19": {
            "name": (194, 1749, 135, 30),
            "flow": (627, 1749, 700, 30),
        },
        "M24_YIZHUANG": {
            "name": (194, 1872, 135, 30),
            "flow": (627, 1872, 700, 30),
        },
        "M25_FANGSHAN": {
            "name": (194, 1831, 135, 30),
            "flow": (627, 1831, 700, 30),
        },
        "YANFANG": {
            "name": (194, 1913, 135, 30),
            "flow": (627, 1913, 700, 30),
        },
        "M26_S1": {
            "name": (194, 1954, 135, 30),
            "flow": (627, 1954, 700, 30),
        },
        "M27_CHANGPING": {
            "name": (194, 1790, 135, 30),
            "flow": (627, 1790, 700, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (194, 2078, 135, 30),
            "flow": (627, 2078, 700, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (194, 2119, 135, 30),
            "flow": (627, 2119, 700, 30),
        },
        "XIJIAO": {
            "name": (194, 2037, 135, 30),
            "flow": (627, 2037, 700, 30),
        },
        "YIZHUANGT1": {
            "name": (194, 1996, 135, 30),
            "flow": (627, 1996, 700, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 310, 899, 300, 45)
    png_flow = img_cut_center(png, 410, 955, 500, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  165).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_10_30_2022_11_10(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 191, 533, 190, 25)
    png_flow = img_cut_center(png, 252, 565, 315, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 105).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 75).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_10_29(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (199, 1131, 135, 30),
            "flow": (627, 1131, 695, 30),
        },
        "M2": {
            "name": (199, 1172, 135, 30),
            "flow": (627, 1172, 695, 30),
        },
        "M4DAXING": {
            "name": (199, 1213, 135, 30),
            "flow": (627, 1213, 695, 30),
        },
        "M5": {
            "name": (199, 1255, 135, 30),
            "flow": (627, 1255, 695, 30),
        },
        "M6": {
            "name": (199, 1296, 135, 30),
            "flow": (627, 1296, 695, 30),
        },
        "M7": {
            "name": (199, 1337, 135, 30),
            "flow": (627, 1337, 695, 30),
        },
        "M8": {
            "name": (199, 1378, 135, 30),
            "flow": (627, 1378, 695, 30),
        },
        "M9": {
            "name": (199, 1419, 135, 30),
            "flow": (627, 1419, 695, 30),
        },
        "M10": {
            "name": (199, 1460, 135, 30),
            "flow": (627, 1460, 695, 30),
        },
        "M11": {
            "name": (199, 1502, 135, 30),
            "flow": (627, 1502, 695, 30),
        },
        "M13": {
            "name": (199, 1543, 135, 30),
            "flow": (627, 1543, 695, 30),
        },
        "M14": {
            "name": (199, 1584, 135, 30),
            "flow": (627, 1584, 695, 30),
        },
        "M15": {
            "name": (199, 1625, 135, 30),
            "flow": (627, 1625, 695, 30),
        },
        "M16": {
            "name": (199, 1666, 135, 30),
            "flow": (627, 1666, 695, 30),
        },
        "M17S": {
            "name": (199, 1707, 135, 30),
            "flow": (627, 1707, 695, 30),
        },
        "M19": {
            "name": (199, 1749, 135, 30),
            "flow": (627, 1749, 695, 30),
        },
        "M24_YIZHUANG": {
            "name": (199, 1872, 135, 30),
            "flow": (627, 1872, 695, 30),
        },
        "M25_FANGSHAN": {
            "name": (199, 1831, 135, 30),
            "flow": (627, 1831, 695, 30),
        },
        "YANFANG": {
            "name": (199, 1913, 135, 30),
            "flow": (627, 1913, 695, 30),
        },
        "M26_S1": {
            "name": (199, 1954, 135, 30),
            "flow": (627, 1954, 695, 30),
        },
        "M27_CHANGPING": {
            "name": (199, 1790, 135, 30),
            "flow": (627, 1790, 695, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (199, 2078, 135, 30),
            "flow": (627, 2078, 695, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (199, 2119, 135, 30),
            "flow": (627, 2119, 695, 30),
        },
        "XIJIAO": {
            "name": (199, 2037, 135, 30),
            "flow": (627, 2037, 695, 30),
        },
        "YIZHUANGT1": {
            "name": (199, 1996, 135, 30),
            "flow": (627, 1996, 695, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 324, 899, 325, 45)
    png_flow = img_cut_center(png, 413, 956, 504, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_10_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (194, 1136, 135, 30),
            "flow": (627, 1136, 695, 30),
        },
        "M2": {
            "name": (194, 1178, 135, 30),
            "flow": (627, 1178, 695, 30),
        },
        "M4DAXING": {
            "name": (194, 1220, 135, 30),
            "flow": (627, 1220, 695, 30),
        },
        "M5": {
            "name": (194, 1263, 135, 30),
            "flow": (627, 1263, 695, 30),
        },
        "M6": {
            "name": (194, 1305, 135, 30),
            "flow": (627, 1305, 695, 30),
        },
        "M7": {
            "name": (194, 1347, 135, 30),
            "flow": (627, 1347, 695, 30),
        },
        "M8": {
            "name": (194, 1389, 135, 30),
            "flow": (627, 1389, 695, 30),
        },
        "M9": {
            "name": (194, 1431, 135, 30),
            "flow": (627, 1431, 695, 30),
        },
        "M10": {
            "name": (194, 1474, 135, 30),
            "flow": (627, 1474, 695, 30),
        },
        "M11": {
            "name": (194, 1516, 135, 30),
            "flow": (627, 1516, 695, 30),
        },
        "M13": {
            "name": (194, 1558, 135, 30),
            "flow": (627, 1558, 695, 30),
        },
        "M14": {
            "name": (194, 1600, 135, 30),
            "flow": (627, 1600, 695, 30),
        },
        "M15": {
            "name": (194, 1643, 135, 30),
            "flow": (627, 1643, 695, 30),
        },
        "M16": {
            "name": (194, 1685, 135, 30),
            "flow": (627, 1685, 695, 30),
        },
        "M17S": {
            "name": (194, 1727, 135, 30),
            "flow": (627, 1727, 695, 30),
        },
        "M19": {
            "name": (194, 1769, 135, 30),
            "flow": (627, 1769, 695, 30),
        },
        "M24_YIZHUANG": {
            "name": (194, 1896, 135, 30),
            "flow": (627, 1896, 695, 30),
        },
        "M25_FANGSHAN": {
            "name": (194, 1854, 135, 30),
            "flow": (627, 1854, 695, 30),
        },
        "YANFANG": {
            "name": (194, 1938, 135, 30),
            "flow": (627, 1938, 695, 30),
        },
        "M26_S1": {
            "name": (194, 1980, 135, 30),
            "flow": (627, 1980, 695, 30),
        },
        "M27_CHANGPING": {
            "name": (194, 1811, 135, 30),
            "flow": (627, 1811, 695, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (194, 2107, 135, 30),
            "flow": (627, 2107, 695, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (194, 2149, 135, 30),
            "flow": (627, 2149, 695, 30),
        },
        "XIJIAO": {
            "name": (194, 2065, 135, 30),
            "flow": (627, 2065, 695, 30),
        },
        "YIZHUANGT1": {
            "name": (194, 2022, 135, 30),
            "flow": (627, 2022, 695, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 324, 899, 325, 45)
    png_flow = img_cut_center(png, 413, 956, 504, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_10_08_2022_10_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 196, 527, 185, 25)
    png_flow = img_cut_center(png, 265, 560, 325, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_10_07(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 196, 527, 185, 25)
    png_flow = img_cut_center(png, 265, 560, 325, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, True, 15).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_09_17_2022_10_06(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 196, 527, 185, 25)
    png_flow = img_cut_center(png, 265, 560, 325, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 150).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_09_16(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 196, 527, 185, 25)
    png_flow = img_cut_center(png, 265, 560, 325, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_09_11_2022_09_15(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 189, 527, 182, 25)
    png_flow = img_cut_center(png, 258, 561, 325, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_09_10(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (194, 1132, 135, 30),
            "flow": (627, 1132, 700, 30),
        },
        "M2": {
            "name": (194, 1175, 135, 30),
            "flow": (627, 1175, 700, 30),
        },
        "M4DAXING": {
            "name": (194, 1217, 135, 30),
            "flow": (627, 1217, 700, 30),
        },
        "M5": {
            "name": (194, 1260, 135, 30),
            "flow": (627, 1260, 700, 30),
        },
        "M6": {
            "name": (194, 1302, 135, 30),
            "flow": (627, 1302, 700, 30),
        },
        "M7": {
            "name": (194, 1345, 135, 30),
            "flow": (627, 1345, 700, 30),
        },
        "M8": {
            "name": (194, 1387, 135, 30),
            "flow": (627, 1387, 700, 30),
        },
        "M9": {
            "name": (194, 1430, 135, 30),
            "flow": (627, 1430, 700, 30),
        },
        "M10": {
            "name": (194, 1472, 135, 30),
            "flow": (627, 1472, 700, 30),
        },
        "M11": {
            "name": (194, 1515, 135, 30),
            "flow": (627, 1515, 700, 30),
        },
        "M13": {
            "name": (194, 1557, 135, 30),
            "flow": (627, 1557, 700, 30),
        },
        "M14": {
            "name": (194, 1600, 135, 30),
            "flow": (627, 1600, 700, 30),
        },
        "M15": {
            "name": (194, 1643, 135, 30),
            "flow": (627, 1643, 700, 30),
        },
        "M16": {
            "name": (194, 1685, 135, 30),
            "flow": (627, 1685, 700, 30),
        },
        "M17S": {
            "name": (194, 1728, 135, 30),
            "flow": (627, 1728, 700, 30),
        },
        "M19": {
            "name": (194, 1770, 135, 30),
            "flow": (627, 1770, 700, 30),
        },
        "M24_YIZHUANG": {
            "name": (194, 1898, 135, 30),
            "flow": (627, 1898, 700, 30),
        },
        "M25_FANGSHAN": {
            "name": (194, 1855, 135, 30),
            "flow": (627, 1855, 700, 30),
        },
        "YANFANG": {
            "name": (194, 1940, 135, 30),
            "flow": (627, 1940, 700, 30),
        },
        "M26_S1": {
            "name": (194, 1983, 135, 30),
            "flow": (627, 1983, 700, 30),
        },
        "M27_CHANGPING": {
            "name": (194, 1813, 135, 30),
            "flow": (627, 1813, 700, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (194, 2110, 135, 30),
            "flow": (627, 2110, 700, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (194, 2153, 135, 30),
            "flow": (627, 2153, 700, 30),
        },
        "XIJIAO": {
            "name": (194, 2068, 135, 30),
            "flow": (627, 2068, 700, 30),
        },
        "YIZHUANGT1": {
            "name": (194, 2025, 135, 30),
            "flow": (627, 2025, 700, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 315, 890, 300, 45)
    png_flow = img_cut_center(png, 415, 946, 500, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_09_04_2022_09_09(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 188, 527, 182, 25)
    png_flow = img_cut_center(png, 258, 561, 325, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_09_03(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (199, 1136, 135, 30),
            "flow": (627, 1136, 695, 30),
        },
        "M2": {
            "name": (199, 1178, 135, 30),
            "flow": (627, 1178, 695, 30),
        },
        "M4DAXING": {
            "name": (199, 1220, 135, 30),
            "flow": (627, 1220, 695, 30),
        },
        "M5": {
            "name": (199, 1263, 135, 30),
            "flow": (627, 1263, 695, 30),
        },
        "M6": {
            "name": (199, 1305, 135, 30),
            "flow": (627, 1305, 695, 30),
        },
        "M7": {
            "name": (199, 1347, 135, 30),
            "flow": (627, 1347, 695, 30),
        },
        "M8": {
            "name": (199, 1389, 135, 30),
            "flow": (627, 1389, 695, 30),
        },
        "M9": {
            "name": (199, 1431, 135, 30),
            "flow": (627, 1431, 695, 30),
        },
        "M10": {
            "name": (199, 1474, 135, 30),
            "flow": (627, 1474, 695, 30),
        },
        "M11": {
            "name": (199, 1516, 135, 30),
            "flow": (627, 1516, 695, 30),
        },
        "M13": {
            "name": (199, 1558, 135, 30),
            "flow": (627, 1558, 695, 30),
        },
        "M14": {
            "name": (199, 1600, 135, 30),
            "flow": (627, 1600, 695, 30),
        },
        "M15": {
            "name": (199, 1643, 135, 30),
            "flow": (627, 1643, 695, 30),
        },
        "M16": {
            "name": (199, 1685, 135, 30),
            "flow": (627, 1685, 695, 30),
        },
        "M17S": {
            "name": (199, 1727, 135, 30),
            "flow": (627, 1727, 695, 30),
        },
        "M19": {
            "name": (199, 1769, 135, 30),
            "flow": (627, 1769, 695, 30),
        },
        "M24_YIZHUANG": {
            "name": (199, 1896, 135, 30),
            "flow": (627, 1896, 695, 30),
        },
        "M25_FANGSHAN": {
            "name": (199, 1854, 135, 30),
            "flow": (627, 1854, 695, 30),
        },
        "YANFANG": {
            "name": (199, 1938, 135, 30),
            "flow": (627, 1938, 695, 30),
        },
        "M26_S1": {
            "name": (199, 1980, 135, 30),
            "flow": (627, 1980, 695, 30),
        },
        "M27_CHANGPING": {
            "name": (199, 1811, 135, 30),
            "flow": (627, 1811, 695, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (199, 2107, 135, 30),
            "flow": (627, 2107, 695, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (199, 2149, 135, 30),
            "flow": (627, 2149, 695, 30),
        },
        "XIJIAO": {
            "name": (199, 2065, 135, 30),
            "flow": (627, 2065, 695, 30),
        },
        "YIZHUANGT1": {
            "name": (199, 2022, 135, 30),
            "flow": (627, 2022, 695, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 307, 891, 285, 45)
    png_flow = img_cut_center(png, 410, 947, 500, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  170).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_08_14_2022_09_02(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 188, 527, 182, 25)
    png_flow = img_cut_center(png, 258, 561, 325, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 150).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_08_13(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (194, 1136, 135, 30),
            "flow": (627, 1136, 695, 30),
        },
        "M2": {
            "name": (194, 1178, 135, 30),
            "flow": (627, 1178, 695, 30),
        },
        "M4DAXING": {
            "name": (194, 1220, 135, 30),
            "flow": (627, 1220, 695, 30),
        },
        "M5": {
            "name": (194, 1263, 135, 30),
            "flow": (627, 1263, 695, 30),
        },
        "M6": {
            "name": (194, 1305, 135, 30),
            "flow": (627, 1305, 695, 30),
        },
        "M7": {
            "name": (194, 1347, 135, 30),
            "flow": (627, 1347, 695, 30),
        },
        "M8": {
            "name": (194, 1389, 135, 30),
            "flow": (627, 1389, 695, 30),
        },
        "M9": {
            "name": (194, 1431, 135, 30),
            "flow": (627, 1431, 695, 30),
        },
        "M10": {
            "name": (194, 1474, 135, 30),
            "flow": (627, 1474, 695, 30),
        },
        "M11": {
            "name": (194, 1516, 135, 30),
            "flow": (627, 1516, 695, 30),
        },
        "M13": {
            "name": (194, 1558, 135, 30),
            "flow": (627, 1558, 695, 30),
        },
        "M14": {
            "name": (194, 1600, 135, 30),
            "flow": (627, 1600, 695, 30),
        },
        "M15": {
            "name": (194, 1643, 135, 30),
            "flow": (627, 1643, 695, 30),
        },
        "M16": {
            "name": (194, 1685, 135, 30),
            "flow": (627, 1685, 695, 30),
        },
        "M17S": {
            "name": (194, 1727, 135, 30),
            "flow": (627, 1727, 695, 30),
        },
        "M19": {
            "name": (194, 1769, 135, 30),
            "flow": (627, 1769, 695, 30),
        },
        "M24_YIZHUANG": {
            "name": (194, 1896, 135, 30),
            "flow": (627, 1896, 695, 30),
        },
        "M25_FANGSHAN": {
            "name": (194, 1854, 135, 30),
            "flow": (627, 1854, 695, 30),
        },
        "YANFANG": {
            "name": (194, 1938, 135, 30),
            "flow": (627, 1938, 695, 30),
        },
        "M26_S1": {
            "name": (194, 1980, 135, 30),
            "flow": (627, 1980, 695, 30),
        },
        "M27_CHANGPING": {
            "name": (194, 1811, 135, 30),
            "flow": (627, 1811, 695, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (194, 2107, 135, 30),
            "flow": (627, 2107, 695, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (194, 2149, 135, 30),
            "flow": (627, 2149, 695, 30),
        },
        "XIJIAO": {
            "name": (194, 2065, 135, 30),
            "flow": (627, 2065, 695, 30),
        },
        "YIZHUANGT1": {
            "name": (194, 2022, 135, 30),
            "flow": (627, 2022, 695, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))

    # 裁剪图片
    png_date = img_cut_center(png, 317, 890, 295, 45)
    png_flow = img_cut_center(png, 438, 940, 530, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  180).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_08_12(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (194, 1131, 135, 30),
            "flow": (627, 1131, 700, 30),
        },
        "M2": {
            "name": (194, 1172, 135, 30),
            "flow": (627, 1172, 700, 30),
        },
        "M4DAXING": {
            "name": (194, 1213, 135, 30),
            "flow": (627, 1213, 700, 30),
        },
        "M5": {
            "name": (194, 1255, 135, 30),
            "flow": (627, 1255, 700, 30),
        },
        "M6": {
            "name": (194, 1296, 135, 30),
            "flow": (627, 1296, 700, 30),
        },
        "M7": {
            "name": (194, 1337, 135, 30),
            "flow": (627, 1337, 700, 30),
        },
        "M8": {
            "name": (194, 1378, 135, 30),
            "flow": (627, 1378, 700, 30),
        },
        "M9": {
            "name": (194, 1419, 135, 30),
            "flow": (627, 1419, 700, 30),
        },
        "M10": {
            "name": (194, 1460, 135, 30),
            "flow": (627, 1460, 700, 30),
        },
        "M11": {
            "name": (194, 1502, 135, 30),
            "flow": (627, 1502, 700, 30),
        },
        "M13": {
            "name": (194, 1543, 135, 30),
            "flow": (627, 1543, 700, 30),
        },
        "M14": {
            "name": (194, 1584, 135, 30),
            "flow": (627, 1584, 700, 30),
        },
        "M15": {
            "name": (194, 1625, 135, 30),
            "flow": (627, 1625, 700, 30),
        },
        "M16": {
            "name": (194, 1666, 135, 30),
            "flow": (627, 1666, 700, 30),
        },
        "M17S": {
            "name": (194, 1707, 135, 30),
            "flow": (627, 1707, 700, 30),
        },
        "M19": {
            "name": (194, 1749, 135, 30),
            "flow": (627, 1749, 700, 30),
        },
        "M24_YIZHUANG": {
            "name": (194, 1872, 135, 30),
            "flow": (627, 1872, 700, 30),
        },
        "M25_FANGSHAN": {
            "name": (194, 1831, 135, 30),
            "flow": (627, 1831, 700, 30),
        },
        "YANFANG": {
            "name": (194, 1913, 135, 30),
            "flow": (627, 1913, 700, 30),
        },
        "M26_S1": {
            "name": (194, 1954, 135, 30),
            "flow": (627, 1954, 700, 30),
        },
        "M27_CHANGPING": {
            "name": (194, 1790, 135, 30),
            "flow": (627, 1790, 700, 30),
        },
        "M34_SHOUDUJICHANG": {
            "name": (194, 2078, 135, 30),
            "flow": (627, 2078, 700, 30),
        },
        "M35_DAXINGJICHANG": {
            "name": (194, 2119, 135, 30),
            "flow": (627, 2119, 700, 30),
        },
        "XIJIAO": {
            "name": (194, 2037, 135, 30),
            "flow": (627, 2037, 700, 30),
        },
        "YIZHUANGT1": {
            "name": (194, 1996, 135, 30),
            "flow": (627, 1996, 700, 30),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 315, 890, 300, 45)
    png_flow = img_cut_center(png, 415, 946, 500, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  165).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_07_29_2022_08_11(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 673, 79, 18),
            "flow": (370, 673, 410, 18),
        },
        "M2": {
            "name": (117, 698, 79, 18),
            "flow": (370, 698, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 723, 79, 18),
            "flow": (370, 723, 410, 18),
        },
        "M5": {
            "name": (117, 748, 79, 18),
            "flow": (370, 748, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 824, 79, 18),
            "flow": (370, 824, 410, 18),
        },
        "M9": {
            "name": (117, 849, 79, 18),
            "flow": (370, 849, 410, 18),
        },
        "M10": {
            "name": (117, 874, 79, 18),
            "flow": (370, 874, 410, 18),
        },
        "M11": {
            "name": (117, 899, 79, 18),
            "flow": (370, 899, 410, 18),
        },
        "M13": {
            "name": (117, 924, 79, 18),
            "flow": (370, 924, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1125, 79, 18),
            "flow": (370, 1125, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1150, 79, 18),
            "flow": (370, 1150, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 188, 527, 180, 25)
    png_flow = img_cut_center(png, 245, 561, 300, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 150).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_07_28(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 663, 79, 18),
            "flow": (370, 663, 410, 18),
        },
        "M2": {
            "name": (117, 689, 79, 18),
            "flow": (370, 689, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 715, 79, 18),
            "flow": (370, 715, 410, 18),
        },
        "M5": {
            "name": (117, 741, 79, 18),
            "flow": (370, 741, 410, 18),
        },
        "M6": {
            "name": (117, 767, 79, 18),
            "flow": (370, 767, 410, 18),
        },
        "M7": {
            "name": (117, 793, 79, 18),
            "flow": (370, 793, 410, 18),
        },
        "M8": {
            "name": (117, 819, 79, 18),
            "flow": (370, 819, 410, 18),
        },
        "M9": {
            "name": (117, 845, 79, 18),
            "flow": (370, 845, 410, 18),
        },
        "M10": {
            "name": (117, 871, 79, 18),
            "flow": (370, 871, 410, 18),
        },
        "M11": {
            "name": (117, 897, 79, 18),
            "flow": (370, 897, 410, 18),
        },
        "M13": {
            "name": (117, 923, 79, 18),
            "flow": (370, 923, 410, 18),
        },
        "M14": {
            "name": (117, 949, 79, 18),
            "flow": (370, 949, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1026, 79, 18),
            "flow": (370, 1026, 410, 18),
        },
        "M19": {
            "name": (117, 1052, 79, 18),
            "flow": (370, 1052, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1130, 79, 18),
            "flow": (370, 1130, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1104, 79, 18),
            "flow": (370, 1104, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1156, 79, 18),
            "flow": (370, 1156, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1182, 79, 18),
            "flow": (370, 1182, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1078, 79, 18),
            "flow": (370, 1078, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1260, 79, 18),
            "flow": (370, 1260, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1286, 79, 18),
            "flow": (370, 1286, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1234, 79, 18),
            "flow": (370, 1234, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1208, 79, 18),
            "flow": (370, 1208, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 185, 527, 180, 25)
    png_flow = img_cut_center(png, 245, 561, 300, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 150).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_07_22_2022_07_27(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 672, 79, 18),
            "flow": (370, 672, 410, 18),
        },
        "M2": {
            "name": (117, 697, 79, 18),
            "flow": (370, 697, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 722, 79, 18),
            "flow": (370, 722, 410, 18),
        },
        "M5": {
            "name": (117, 747, 79, 18),
            "flow": (370, 747, 410, 18),
        },
        "M6": {
            "name": (117, 773, 79, 18),
            "flow": (370, 773, 410, 18),
        },
        "M7": {
            "name": (117, 798, 79, 18),
            "flow": (370, 798, 410, 18),
        },
        "M8": {
            "name": (117, 823, 79, 18),
            "flow": (370, 823, 410, 18),
        },
        "M9": {
            "name": (117, 848, 79, 18),
            "flow": (370, 848, 410, 18),
        },
        "M10": {
            "name": (117, 873, 79, 18),
            "flow": (370, 873, 410, 18),
        },
        "M11": {
            "name": (117, 898, 79, 18),
            "flow": (370, 898, 410, 18),
        },
        "M13": {
            "name": (117, 923, 79, 18),
            "flow": (370, 923, 410, 18),
        },
        "M14": {
            "name": (117, 948, 79, 18),
            "flow": (370, 948, 410, 18),
        },
        "M15": {
            "name": (117, 974, 79, 18),
            "flow": (370, 974, 410, 18),
        },
        "M16": {
            "name": (117, 999, 79, 18),
            "flow": (370, 999, 410, 18),
        },
        "M17S": {
            "name": (117, 1024, 79, 18),
            "flow": (370, 1024, 410, 18),
        },
        "M19": {
            "name": (117, 1049, 79, 18),
            "flow": (370, 1049, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1124, 79, 18),
            "flow": (370, 1124, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1099, 79, 18),
            "flow": (370, 1099, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1149, 79, 18),
            "flow": (370, 1149, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1175, 79, 18),
            "flow": (370, 1175, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1074, 79, 18),
            "flow": (370, 1074, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1250, 79, 18),
            "flow": (370, 1250, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1275, 79, 18),
            "flow": (370, 1275, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1225, 79, 18),
            "flow": (370, 1225, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1200, 79, 18),
            "flow": (370, 1200, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))
    
    # 裁剪图片
    png_date = img_cut_center(png, 185, 527, 180, 25)
    png_flow = img_cut_center(png, 245, 561, 300, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_07_11_2022_07_21(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (117, 674, 79, 18),
            "flow": (370, 674, 410, 18),
        },
        "M2": {
            "name": (117, 699, 79, 18),
            "flow": (370, 699, 410, 18),
        },
        "M4DAXING": {
            "name": (117, 724, 79, 18),
            "flow": (370, 724, 410, 18),
        },
        "M5": {
            "name": (117, 749, 79, 18),
            "flow": (370, 749, 410, 18),
        },
        "M6": {
            "name": (117, 774, 79, 18),
            "flow": (370, 774, 410, 18),
        },
        "M7": {
            "name": (117, 799, 79, 18),
            "flow": (370, 799, 410, 18),
        },
        "M8": {
            "name": (117, 825, 79, 18),
            "flow": (370, 825, 410, 18),
        },
        "M9": {
            "name": (117, 850, 79, 18),
            "flow": (370, 850, 410, 18),
        },
        "M10": {
            "name": (117, 875, 79, 18),
            "flow": (370, 875, 410, 18),
        },
        "M11": {
            "name": (117, 900, 79, 18),
            "flow": (370, 900, 410, 18),
        },
        "M13": {
            "name": (117, 925, 79, 18),
            "flow": (370, 925, 410, 18),
        },
        "M14": {
            "name": (117, 950, 79, 18),
            "flow": (370, 950, 410, 18),
        },
        "M15": {
            "name": (117, 975, 79, 18),
            "flow": (370, 975, 410, 18),
        },
        "M16": {
            "name": (117, 1000, 79, 18),
            "flow": (370, 1000, 410, 18),
        },
        "M17S": {
            "name": (117, 1025, 79, 18),
            "flow": (370, 1025, 410, 18),
        },
        "M19": {
            "name": (117, 1050, 79, 18),
            "flow": (370, 1050, 410, 18),
        },
        "M24_YIZHUANG": {
            "name": (117, 1126, 79, 18),
            "flow": (370, 1126, 410, 18),
        },
        "M25_FANGSHAN": {
            "name": (117, 1100, 79, 18),
            "flow": (370, 1100, 410, 18),
        },
        "YANFANG": {
            "name": (117, 1151, 79, 18),
            "flow": (370, 1151, 410, 18),
        },
        "M26_S1": {
            "name": (117, 1176, 79, 18),
            "flow": (370, 1176, 410, 18),
        },
        "M27_CHANGPING": {
            "name": (117, 1075, 79, 18),
            "flow": (370, 1075, 410, 18),
        },
        "M34_SHOUDUJICHANG": {
            "name": (117, 1251, 79, 18),
            "flow": (370, 1251, 410, 18),
        },
        "M35_DAXINGJICHANG": {
            "name": (117, 1276, 79, 18),
            "flow": (370, 1276, 410, 18),
        },
        "XIJIAO": {
            "name": (117, 1226, 79, 18),
            "flow": (370, 1226, 410, 18),
        },
        "YIZHUANGT1": {
            "name": (117, 1201, 79, 18),
            "flow": (370, 1201, 410, 18),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([540, 1100, 640, 1200], fill=(255, 255, 255))

    # 裁剪图片
    png_date = img_cut_center(png, 185, 527, 180, 25)
    png_flow = img_cut_center(png, 256, 561, 300, 25)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(img_binarize(png_date, False, 125).convert("RGB"))
    png_flow_array = np.array(img_binarize(png_flow, False, 50).convert("RGB"))

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], False,  185).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack

def ocr_2022_07_10(png: Image.Image):
    # 各线路数据位置信息
    CROP_CONFIG = { 
        "M1BATONG": {
            "name": (175, 1133, 130, 25),
            "flow": (630, 1133, 755, 25),
        },
        "M2": {
            "name": (175, 1168, 130, 25),
            "flow": (630, 1168, 755, 25),
        },
        "M4DAXING": {
            "name": (175, 1204, 130, 25),
            "flow": (630, 1204, 755, 25),
        },
        "M5": {
            "name": (175, 1239, 130, 25),
            "flow": (630, 1239, 755, 25),
        },
        "M6": {
            "name": (175, 1274, 130, 25),
            "flow": (630, 1274, 755, 25),
        },
        "M7": {
            "name": (175, 1310, 130, 25),
            "flow": (630, 1310, 755, 25),
        },
        "M8": {
            "name": (175, 1345, 130, 25),
            "flow": (630, 1345, 755, 25),
        },
        "M9": {
            "name": (175, 1380, 130, 25),
            "flow": (630, 1380, 755, 25),
        },
        "M10": {
            "name": (175, 1416, 130, 25),
            "flow": (630, 1416, 755, 25),
        },
        "M11": {
            "name": (175, 1451, 130, 25),
            "flow": (630, 1451, 755, 25),
        },
        "M13": {
            "name": (175, 1486, 130, 25),
            "flow": (630, 1486, 755, 25),
        },
        "M14": {
            "name": (175, 1522, 130, 25),
            "flow": (630, 1522, 755, 25),
        },
        "M15": {
            "name": (175, 1557, 130, 25),
            "flow": (630, 1557, 755, 25),
        },
        "M16": {
            "name": (175, 1592, 130, 25),
            "flow": (630, 1592, 755, 25),
        },
        "M17S": {
            "name": (175, 1628, 130, 25),
            "flow": (630, 1628, 755, 25),
        },
        "M19": {
            "name": (175, 1663, 130, 25),
            "flow": (630, 1663, 755, 25),
        },
        "M24_YIZHUANG": {
            "name": (175, 1769, 130, 25),
            "flow": (630, 1769, 755, 25),
        },
        "M25_FANGSHAN": {
            "name": (175, 1734, 130, 25),
            "flow": (630, 1734, 755, 25),
        },
        "YANFANG": {
            "name": (175, 1804, 130, 25),
            "flow": (630, 1804, 755, 25),
        },
        "M26_S1": {
            "name": (175, 1840, 130, 25),
            "flow": (630, 1840, 755, 25),
        },
        "M27_CHANGPING": {
            "name": (175, 1698, 130, 25),
            "flow": (630, 1698, 755, 25),
        },
        "M34_SHOUDUJICHANG": {
            "name": (175, 1946, 130, 25),
            "flow": (630, 1946, 755, 25),
        },
        "M35_DAXINGJICHANG": {
            "name": (175, 1981, 130, 25),
            "flow": (630, 1981, 755, 25),
        },
        "XIJIAO": {
            "name": (175, 1910, 130, 25),
            "flow": (630, 1910, 755, 25),
        },
        "YIZHUANGT1": {
            "name": (175, 1875, 130, 25),
            "flow": (630, 1875, 755, 25),
        }
    }

    # 为M24_YIZHUANG识别设置 - 填充部分内容为白色
    ImageDraw.Draw(png).rectangle([920, 1870, 1080, 2030], fill=(255, 255, 255))

    # 裁剪图片
    png_date = img_cut_center(png, 317, 890, 295, 45)
    png_flow = img_cut_center(png, 438, 940, 530, 45)

    for line, cfg in CROP_CONFIG.items():
        globals()[f"png_{line}_name"] = img_cut_center(png, *cfg["name"])
        globals()[f"png_{line}_flow"] = img_cut_center(png, *cfg["flow"])

    # 转换格式
    png_date_array = np.array(png_date)
    png_flow_array = np.array(png_flow)

    for line in CROP_CONFIG.keys():
        globals()[f"png_{line}_name_array"] = np.array(globals()[f"png_{line}_name"])
        globals()[f"png_{line}_flow_array"] = np.array(img_binarize(globals()[f"png_{line}_flow"], True,  119).convert("RGB")) # 二值化
    
    # OCR
    result_date = model_textrec.predict(png_date_array, batch_size=1)
    text_date = re.sub(r"[^0-9年月日]", "", result_date[0]["rec_text"])

    result_flow = model_textrec.predict(png_flow_array, batch_size=1)
    text_flow = re.sub(r"\.$", "", re.sub(r"[^0-9\.万人次]", "", result_flow[0]["rec_text"]))

    for line in CROP_CONFIG.keys():
        globals()[f"result_{line}_name"] = model_textrec.predict(globals()[f"png_{line}_name_array"], batch_size=1)
        globals()[f"text_{line}_name"] = re.sub(r'[^0-9-号线八通大兴北段亦庄房山燕房S昌平首都大兴机场西郊T]+', '', globals()[f"result_{line}_name"][0]["rec_text"])

        detection_flow = model_textdet.predict(globals()[f"png_{line}_flow_array"], batch_size=1)
        if len(detection_flow[0]["dt_polys"]):
            lux = min(item[0][0] for item in detection_flow[0]["dt_polys"])
            luy = min(item[0][1] for item in detection_flow[0]["dt_polys"])
            rux = max(item[1][0] for item in detection_flow[0]["dt_polys"])
            ruy = min(item[1][1] for item in detection_flow[0]["dt_polys"])
            rdx = max(item[2][0] for item in detection_flow[0]["dt_polys"])
            rdy = max(item[2][1] for item in detection_flow[0]["dt_polys"])
            ldx = min(item[3][0] for item in detection_flow[0]["dt_polys"])
            ldy = max(item[3][1] for item in detection_flow[0]["dt_polys"])
            
            png_det = img_cut_point(Image.fromarray(globals()[f"png_{line}_flow_array"]), lux, luy, rux, ruy, rdx, rdy, ldx, ldy)
            png_det_array = np.array(png_det)

            globals()[f"result_{line}_flow"] = model_textrec.predict(png_det_array, batch_size=1)
            globals()[f"text_{line}_flow"] = re.sub(r"\.(?=.*\.\d{2}$)", "", re.sub(r"\.$", "", re.sub(r"[^0-9.]", "", globals()[f"result_{line}_flow"][0]["rec_text"].replace("I", "1").replace("B", "8").replace(":", ".").replace(",", "."))))
        else:
            globals()[f"text_{line}_flow"] = "NOVALUE"
    
    # 数据校验和存储
    match_date = re.match(r"^(\d{4})年(\d{1,2})月(\d{1,2})日$", text_date)
    if match_date:
        final_date = f"{match_date.group(1)}-{int(match_date.group(2)):02d}-{int(match_date.group(3)):02d}"
    else:
        final_date = "ERROR"

    match_flow = re.match(r"^([\d.]+)万人次$", text_flow)
    if match_flow:
        final_flow = match_flow.group(1)
    else:
        final_flow = "ERROR"

    final_linedata = []
    for line in CROP_CONFIG.keys():
        if globals()[f"text_{line}_flow"] == "NOVALUE":
            single_linedata = {
                "name": line,
                "flow": "NOVALUE"
            }
        else:
            match_lineflow = re.match(r"^\d+\.\d{2}$", globals()[f"text_{line}_flow"])
            if match_lineflow:
                single_linedata = {
                    "name": line,
                    "flow": globals()[f"text_{line}_flow"]
                }
            else:
                single_linedata = {
                    "name": line,
                    "flow": "ERROR"
                }
        final_linedata.append(single_linedata)

    # 数据返回
    ocrrespack = {
        "date": final_date,
        "flow": final_flow,
        "linedata": final_linedata
    }
    return ocrrespack
